{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css'; //components\n\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7); //get data from csv file and add it to the advisorArray\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n        //get advisors > split the rows into each one of the fields\n        const advisors = csv.split('\\n').slice(1);\n        const tempArray = []; //save every advisor and add it to the advisorsArray\n\n        advisors.forEach(element => {\n          const advisorData = element.split(';');\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n            Adres: {\n              Straatnaam: advisorData[1],\n              //remove spces from postcode\n              Postcode: advisorData[2].replace(/\\s+/g, ''),\n              Woonplaats: advisorData[3]\n            },\n            Website: {\n              Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n              Url: advisorData[4]\n            }\n          };\n          tempArray.push(advisor);\n        });\n        setAdvisorsArray(tempArray);\n      });\n    };\n\n    getData();\n  }, []);\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) || advisor.Adres.Woonplaats.toLowerCase().includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor);\n      }\n    });\n    console.log(searchQuery);\n    return newArr;\n  }, [advisorsArray, searchQuery]); //Pagination variables\n\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage]);\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage]);\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor);\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor]); //Set the current page number\n\n  const currentPageNumber = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; //filter the list of advisors to create list of suggestions\n\n\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisorsArray.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats);\n    }); //Set removes all duplicate items\n\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions); //convert uniqueSet back to an array\n\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]; //sort on alphabetical order\n\n    filteredSugestions.sort();\n    return filteredSugestions;\n  }, [advisorsArray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {\n      suggestions: suggestions,\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery,\n      setResultsVisible: setResultsVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      resultsVisible: resultsVisible,\n      searchQuery: searchQuery,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisorsArray,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      fitleredAdvisors: filteredAdvisors.length,\n      currentPageNumber: n => currentPageNumber(n),\n      maxAmountPaginationPages: maxAmountPaginationPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oxuEGleWCoO4mReLzsPC2jTq4HM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["useState","useEffect","useMemo","v4","uuidv4","SearchResults","SearchComponent","App","advisorsArray","setAdvisorsArray","searchQuery","setSearchQuery","resultsVisible","setResultsVisible","currentPage","setCurrentPage","advisorsPerPage","maxAmountPaginationPages","getData","fetch","then","response","text","csv","advisors","split","slice","tempArray","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Straatnaam","Postcode","replace","Woonplaats","Website","Naam","Url","push","filteredAdvisors","newArr","toLowerCase","includes","console","log","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","currentPageNumber","pageNumber","suggestions","filterAdvisorsSuggestions","uniqueSetAdvisorsWoonplaats","Set","filteredSugestions","sort","length","n"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\n//components\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\n\n\n\nfunction App() {\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7);\n\n  //get data from csv file and add it to the advisorArray\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n\n      fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n          //get advisors > split the rows into each one of the fields\n          const advisors = csv.split('\\n').slice(1);\n          const tempArray = [];\n\n          //save every advisor and add it to the advisorsArray\n          advisors.forEach(element => {\n            const advisorData = element.split(';')\n            let advisor = {\n              id: uuidv4(),\n              Bedrijfsnaam: advisorData[0],\n              // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n              Adres: {\n                Straatnaam: advisorData[1],\n                //remove spces from postcode\n                Postcode: advisorData[2].replace(/\\s+/g, ''),\n                Woonplaats: advisorData[3],\n\n              },\n              Website: {\n                Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n                Url: advisorData[4],\n              }\n            }\n            tempArray.push(advisor)\n          });\n          setAdvisorsArray(tempArray)\n        })\n    }\n    getData()\n  }, []);\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (\n        advisor.Bedrijfsnaam.toLowerCase()\n          .includes(searchQuery.toLowerCase())\n        ||\n        advisor.Adres.Woonplaats.toLowerCase()\n          .includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor)\n      }\n    });\n    console.log(searchQuery);\n    return newArr\n  }, [advisorsArray, searchQuery]);\n\n\n  //Pagination variables\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage])\n\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage])\n\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor])\n\n  //Set the current page number\n  const currentPageNumber = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  //filter the list of advisors to create list of suggestions\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisorsArray.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats)\n    })\n    //Set removes all duplicate items\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions);\n    //convert uniqueSet back to an array\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]\n    //sort on alphabetical order\n    filteredSugestions.sort()\n    return filteredSugestions\n  }, [advisorsArray]);\n\n\n  return (\n    <div className=\"App\">\n      <SearchComponent\n        suggestions={suggestions}\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        setResultsVisible={setResultsVisible}\n      />\n      <SearchResults\n        resultsVisible={resultsVisible}\n        searchQuery={searchQuery}\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisorsArray}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage}\n        fitleredAdvisors={filteredAdvisors.length}\n        currentPageNumber={n => currentPageNumber(n)}\n        maxAmountPaginationPages={maxAmountPaginationPages}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}