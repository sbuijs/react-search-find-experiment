{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = _ref => {\n  _s();\n\n  let {\n    suggestions,\n    searchTerm\n  } = _ref;\n  //input field value\n  const [searchInput, setSearchInput] = useState(\"\"); //current suggestions list \n\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]); //show/hide the suggestions\n\n  const [showSuggestions, setShowSuggestions] = useState(false); //index of selected suggestion in suggestions list\n\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0); //when the user changes the input value this method will fire\n\n  const handleInput = e => {\n    e.preventDefault(); //what the user types in the searchbar\n\n    const userInput = e.target.value; //search input field gets filled with what the user types in the input field\n\n    setSearchInput(userInput); // Filter suggestions that don't contain the user's input\n\n    const currentSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1); //set the search term with the user input\n\n    console.log(`handleInput userInput: ${userInput}`);\n    searchTerm(userInput);\n    setFilteredSuggestions(currentSuggestions);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true);\n  }; //event that will be emitted when a user clicks on a suggestion\n\n\n  const setSuggestion = suggestion => {\n    //add the suggestion to the searchInput field\n    setSearchInput(suggestion); //pass suggestion to the searchTerm\n\n    searchTerm(suggestion); //empty filtered suggestions \n\n    setFilteredSuggestions([]); //reset the active suggestion index to 0\n\n    setActiveSuggestionIndex(0); //hide the suggestions list\n\n    setShowSuggestions(false);\n  };\n\n  const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      //on enter\n      //get the value of the selected suggestion\n      const suggestion = filteredSuggestions[activeSuggestionIndex]; //push it to the setSuggestion()\n\n      setSuggestion(suggestion);\n    } else if (e.keyCode === 38) {\n      //on arrow up\n      if (activeSuggestionIndex <= 0) {\n        //do nothing\n        return;\n      }\n\n      if (activeSuggestionIndex > 0) {\n        //increment index with one\n        setActiveSuggestionIndex(activeSuggestionIndex - 1);\n      }\n    } else if (e.keyCode === 40) {\n      //on  arrow down\n      if (activeSuggestionIndex <= filteredSuggestions.length - 2) {\n        //increment index with one\n        setActiveSuggestionIndex(activeSuggestionIndex + 1);\n        console.log(activeSuggestionIndex);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      autoComplete: \"off\",\n      id: \"search-field\",\n      onKeyDown: onKeyDown,\n      value: searchInput,\n      onChange: e => handleInput(e),\n      placeholder: \"Vul hier de plaatsnaam in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), showSuggestions && searchInput && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {\n      filteredSuggestions: filteredSuggestions,\n      activeSuggestionIndex: activeSuggestionIndex,\n      onClick: s => setSuggestion(s),\n      searchInput: searchInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Autocomplete, \"RQx81nty6OPbkfSwFOxtbe0kzPc=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","SuggestionsListComponent","Autocomplete","suggestions","searchTerm","searchInput","setSearchInput","filteredSuggestions","setFilteredSuggestions","showSuggestions","setShowSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","handleInput","e","preventDefault","userInput","target","value","currentSuggestions","filter","suggestion","toLowerCase","indexOf","console","log","setSuggestion","onKeyDown","keyCode","length","s"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent'\n\nexport const Autocomplete = ({ suggestions, searchTerm }) => {\n\n    //input field value\n    const [searchInput, setSearchInput] = useState(\"\");\n\n    //current suggestions list \n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n\n    //show/hide the suggestions\n    const [showSuggestions, setShowSuggestions] = useState(false);\n\n    //index of selected suggestion in suggestions list\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n\n\n    //when the user changes the input value this method will fire\n    const handleInput = (e) => {\n        e.preventDefault()\n\n        //what the user types in the searchbar\n        const userInput = e.target.value;\n        //search input field gets filled with what the user types in the input field\n        setSearchInput(userInput);\n\n        // Filter suggestions that don't contain the user's input\n        const currentSuggestions = suggestions.filter(\n            (suggestion) =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n\n        //set the search term with the user input\n        console.log(`handleInput userInput: ${userInput}`);\n\n        searchTerm(userInput);\n\n        setFilteredSuggestions(currentSuggestions)\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(true)\n    }\n\n\n    //event that will be emitted when a user clicks on a suggestion\n    const setSuggestion = (suggestion) => {\n        //add the suggestion to the searchInput field\n        setSearchInput(suggestion)\n\n        //pass suggestion to the searchTerm\n        searchTerm(suggestion);\n\n        //empty filtered suggestions \n        setFilteredSuggestions([]);\n        //reset the active suggestion index to 0\n        setActiveSuggestionIndex(0)\n        //hide the suggestions list\n        setShowSuggestions(false)\n    }\n\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            //on enter\n            //get the value of the selected suggestion\n            const suggestion = filteredSuggestions[activeSuggestionIndex]\n            //push it to the setSuggestion()\n            setSuggestion(suggestion)\n\n        } else if (e.keyCode === 38) {\n            //on arrow up\n            if (activeSuggestionIndex <= 0) {\n                //do nothing\n                return\n            } if (activeSuggestionIndex > 0) {\n                //increment index with one\n                setActiveSuggestionIndex(activeSuggestionIndex - 1)\n            }\n        } else if (e.keyCode === 40) {\n            //on  arrow down\n            if (activeSuggestionIndex <= filteredSuggestions.length - 2) {\n                //increment index with one\n                setActiveSuggestionIndex(activeSuggestionIndex + 1)\n                console.log(activeSuggestionIndex);\n            }\n        }\n    }\n\n    return (\n        <>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                id=\"search-field\"\n                onKeyDown={onKeyDown}\n                value={searchInput}\n                onChange={(e) => handleInput(e)}\n                placeholder='Vul hier de plaatsnaam in'\n            />\n            {showSuggestions && searchInput &&\n                <SuggestionsListComponent\n                    filteredSuggestions={filteredSuggestions}\n                    activeSuggestionIndex={activeSuggestionIndex}\n                    onClick={s => setSuggestion(s)}\n                    searchInput={searchInput}\n                />}\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}