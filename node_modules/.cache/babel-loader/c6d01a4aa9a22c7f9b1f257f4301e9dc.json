{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { ListOfEntries } from './components/ListOfEntries';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [tableTitles, setTableTitles] = useState([]); // only works when the file is in the public folder\n\n  function getData() {\n    fetch('/data/advisors_10000.csv').then(response => response.text()).then(csv => {\n      //split the data based on the line break, and remove the first row\n      const titles = csv.split('\\n').slice(0, 1);\n      console.log(titles);\n      const titlesArray = [];\n      titles.forEach(element => {\n        const tableTitleData = element.split(':');\n        console.log(tableTitleData);\n      });\n      const advisors = csv.split('\\n').slice(1); //array to save all the objects in\n\n      const advisorsArray = []; //split the rows into each one of the fields\n\n      advisors.forEach(element => {\n        const advisorData = element.split(';');\n        let advisor = {\n          id: uuidv4(),\n          Bedrijfsnaam: advisorData[0],\n          Adres: advisorData[1],\n          Postcode: advisorData[2],\n          Woonplaats: advisorData[3],\n          Website: advisorData[4]\n        };\n        advisorsArray.push(advisor);\n      }); //set the array\n\n      setAdvisorsArray(advisorsArray);\n    });\n  } // const filterAdvisor = () =>{\n  //   const filteredAdvisor = advvisor\n  //   setAdvisorsArray(filteredAdvisor)\n  // }\n\n\n  useEffect(() => {\n    getData();\n  }, []); //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n  //The thing that separates the things is a line break.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListOfEntries, {\n      advisorsArray: advisorsArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0jDR0h7bpGXOWO34NZ7Zu5jmqnI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","ListOfEntries","useState","useEffect","v4","uuidv4","App","advisorsArray","setAdvisorsArray","tableTitles","setTableTitles","getData","fetch","then","response","text","csv","titles","split","slice","console","log","titlesArray","forEach","element","tableTitleData","advisors","advisorData","advisor","id","Bedrijfsnaam","Adres","Postcode","Woonplaats","Website","push"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,eAAT,QAAgC,8BAAhC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C,CAHa,CAMb;;AACA,WAASS,OAAT,GAAmB;AACjBC,IAAAA,KAAK,CAAC,0BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAEQG,GAAG,IAAI;AAEX;AACA,YAAMC,MAAM,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AAEA,YAAMK,WAAW,GAAG,EAApB;AAEAL,MAAAA,MAAM,CAACM,OAAP,CAAeC,OAAO,IAAI;AACxB,cAAMC,cAAc,GAAGD,OAAO,CAACN,KAAR,CAAc,GAAd,CAAvB;AAEAE,QAAAA,OAAO,CAACC,GAAR,CAAYI,cAAZ;AAED,OALD;AAQA,YAAMC,QAAQ,GAAGV,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,CAAjB,CAhBW,CAkBX;;AACA,YAAMZ,aAAa,GAAG,EAAtB,CAnBW,CAqBX;;AAEAmB,MAAAA,QAAQ,CAACH,OAAT,CAAiBC,OAAO,IAAI;AAC1B,cAAMG,WAAW,GAAGH,OAAO,CAACN,KAAR,CAAc,GAAd,CAApB;AACA,YAAIU,OAAO,GAAG;AACZC,UAAAA,EAAE,EAAExB,MAAM,EADE;AAEZyB,UAAAA,YAAY,EAAEH,WAAW,CAAC,CAAD,CAFb;AAGZI,UAAAA,KAAK,EAAEJ,WAAW,CAAC,CAAD,CAHN;AAIZK,UAAAA,QAAQ,EAAEL,WAAW,CAAC,CAAD,CAJT;AAKZM,UAAAA,UAAU,EAAEN,WAAW,CAAC,CAAD,CALX;AAMZO,UAAAA,OAAO,EAAEP,WAAW,CAAC,CAAD;AANR,SAAd;AAQApB,QAAAA,aAAa,CAAC4B,IAAd,CAAmBP,OAAnB;AACD,OAXD,EAvBW,CAoCX;;AACApB,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,KAxCH;AAyCD,GAjDY,CAoDb;AACA;AACA;AACA;;;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT,CAzDa,CAkEb;AACA;AAEA;AACA;AAEA;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,aAAD;AAAe,MAAA,aAAa,EAAEJ;AAA9B;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAlFQD,G;;KAAAA,G;AAoFT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent'\nimport { ListOfEntries } from './components/ListOfEntries';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [tableTitles, setTableTitles] = useState([]);\n\n\n  // only works when the file is in the public folder\n  function getData() {\n    fetch('/data/advisors_10000.csv')\n      .then((response) => response.text())\n      .then(csv => {\n\n        //split the data based on the line break, and remove the first row\n        const titles = csv.split('\\n').slice(0, 1);\n        console.log(titles);\n\n        const titlesArray = [];\n\n        titles.forEach(element => {\n          const tableTitleData = element.split(':')\n\n          console.log(tableTitleData);\n\n        })\n\n\n        const advisors = csv.split('\\n').slice(1);\n\n        //array to save all the objects in\n        const advisorsArray = [];\n\n        //split the rows into each one of the fields\n\n        advisors.forEach(element => {\n          const advisorData = element.split(';')\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            Adres: advisorData[1],\n            Postcode: advisorData[2],\n            Woonplaats: advisorData[3],\n            Website: advisorData[4]\n          }\n          advisorsArray.push(advisor)\n        });\n\n        //set the array\n        setAdvisorsArray(advisorsArray)\n      })\n  }\n\n\n  // const filterAdvisor = () =>{\n  //   const filteredAdvisor = advvisor\n  //   setAdvisorsArray(filteredAdvisor)\n  // }\n\n  useEffect(() => {\n    getData()\n  }, []);\n\n\n\n\n\n\n  //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n\n  //The thing that separates the things is a line break.\n\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={() => getData()}>Getdata</button> */}\n      <SearchComponent />\n      <ListOfEntries advisorsArray={advisorsArray} />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}