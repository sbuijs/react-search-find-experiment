{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css'; //components\n\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Autocomplete } from './components/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TestComponent() {\n  _s();\n\n  const [value1, setValue1] = useState(1);\n  const [value2, setValue2] = useState(1);\n\n  const sum = () => {\n    return value1 + value2;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [value1, \" + \", value2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"= \", sum()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TestComponent, \"A/qiLeCas1NYKTfs1pL7yveM8L4=\");\n\n_c = TestComponent;\n\nfunction App() {\n  _s2();\n\n  //default\n  const [advisorsArray, setAdvisorsArray] = useState([]); //search\n\n  const [searchQuery, setSearchQuery] = useState(\"\"); // const [filteredAdvisors, setFilteredAvisors] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  const [resultsVisible, setResultsVisible] = useState(false); //pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10); //get data from csv file and add it to the advisorArray\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true);\n      fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n        //get advisors > split the rows into each one of the fields\n        const advisors = csv.split('\\n').slice(1);\n        const tempArray = []; //save every advisor and add it to the advisorsArray\n\n        advisors.forEach(element => {\n          const advisorData = element.split(';');\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n            Adres: {\n              Straatnaam: advisorData[1],\n              //remove spces from postcode\n              Postcode: advisorData[2].replace(/\\s+/g, ''),\n              Woonplaats: advisorData[3]\n            },\n            Website: {\n              Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n              Url: advisorData[4]\n            }\n          };\n          tempArray.push(advisor);\n        });\n        setAdvisorsArray(tempArray);\n      });\n      setLoading(false);\n    };\n\n    getData();\n  }, []); //Filter the advisorsArray based on the searchQuery\n\n  useEffect(() => {\n    function filterAdvisors() {\n      const newArr = [];\n      advisorsArray.forEach(advisor => {\n        if (advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) || advisor.Adres.Woonplaats.toLowerCase().includes(searchQuery.toLowerCase())) {\n          newArr.push(advisor);\n        }\n\n        return newArr;\n      });\n      setFilteredAvisors(newArr);\n      return filteredAdvisors;\n    }\n\n    filterAdvisors();\n  }, [searchQuery]);\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) || advisor.Adres.Woonplaats.toLowerCase().includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor);\n      }\n\n      return newArr;\n    });\n    return filteredAdvisors;\n  }, [advisorsArray, searchQuery]); //Pagination variables\n\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor); //Set the current page number\n\n  const paginate = (e, pageNumber) => {\n    e.preventDefault();\n    setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      suggestions: [\"Alligator\", \"Bask\", \"Crocodilian\", \"Death Roll\", \"Eggs\", \"Jaws\", \"Reptile\", \"Solitary\", \"Tail\", \"Wetlands\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchComponent, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery,\n      setResultsVisible: setResultsVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      resultsVisible: resultsVisible,\n      loading: loading,\n      searchQuery: searchQuery,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisorsArray,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      fitleredAdvisors: filteredAdvisors.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"IqQPUfoj28TDxiRGznulDV5qQuo=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TestComponent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["useState","useEffect","v4","uuidv4","SearchResults","SearchComponent","Autocomplete","TestComponent","value1","setValue1","value2","setValue2","sum","App","advisorsArray","setAdvisorsArray","searchQuery","setSearchQuery","loading","setLoading","resultsVisible","setResultsVisible","currentPage","setCurrentPage","advisorsPerPage","getData","fetch","then","response","text","csv","advisors","split","slice","tempArray","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Straatnaam","Postcode","replace","Woonplaats","Website","Naam","Url","push","filterAdvisors","newArr","toLowerCase","includes","setFilteredAvisors","filteredAdvisors","useMemo","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","paginate","e","pageNumber","preventDefault","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\n//components\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Autocomplete } from './components/Autocomplete';\n\n\n\n\nfunction TestComponent() {\n  const [value1, setValue1] = useState(1);\n  const [value2, setValue2] = useState(1);\n\n  const sum = () => {\n    return value1 + value2;\n  }\n\n  return (\n    <>\n      <div>{value1} + {value2}</div>\n      <div>= {sum()}</div>\n    </>\n  )\n}\n\n\n\n\n\n\n\n\nfunction App() {\n\n  //default\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n  //search\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  // const [filteredAdvisors, setFilteredAvisors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [resultsVisible, setResultsVisible] = useState(false);\n\n  //pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n\n  //get data from csv file and add it to the advisorArray\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true)\n\n      fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n          //get advisors > split the rows into each one of the fields\n          const advisors = csv.split('\\n').slice(1);\n          const tempArray = [];\n\n          //save every advisor and add it to the advisorsArray\n          advisors.forEach(element => {\n            const advisorData = element.split(';')\n            let advisor = {\n              id: uuidv4(),\n              Bedrijfsnaam: advisorData[0],\n              // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n              Adres: {\n                Straatnaam: advisorData[1],\n                //remove spces from postcode\n                Postcode: advisorData[2].replace(/\\s+/g, ''),\n                Woonplaats: advisorData[3],\n\n              },\n              Website: {\n                Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n                Url: advisorData[4],\n              }\n            }\n            tempArray.push(advisor)\n          });\n          setAdvisorsArray(tempArray)\n        })\n\n      setLoading(false)\n    }\n    getData()\n  }, []);\n\n\n  //Filter the advisorsArray based on the searchQuery\n  useEffect(() => {\n    function filterAdvisors() {\n      const newArr = [];\n      advisorsArray.forEach(advisor => {\n        if (\n          advisor.Bedrijfsnaam.toLowerCase()\n            .includes(searchQuery.toLowerCase())\n          ||\n          advisor.Adres.Woonplaats.toLowerCase()\n            .includes(searchQuery.toLowerCase())) {\n          newArr.push(advisor)\n        }\n        return newArr\n      });\n      setFilteredAvisors(newArr)\n      return filteredAdvisors\n    }\n    filterAdvisors()\n  }, [searchQuery]);\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (\n        advisor.Bedrijfsnaam.toLowerCase()\n          .includes(searchQuery.toLowerCase())\n        ||\n        advisor.Adres.Woonplaats.toLowerCase()\n          .includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor)\n      }\n      return newArr\n    });\n    return filteredAdvisors\n  }, [advisorsArray, searchQuery]);\n\n\n  //Pagination variables\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n\n  //Set the current page number\n  const paginate = (e, pageNumber) => {\n    e.preventDefault();\n    setCurrentPage(pageNumber)\n  }\n\n  return (\n    <div className=\"App\">\n      <Autocomplete\n        suggestions={[\n          \"Alligator\",\n          \"Bask\",\n          \"Crocodilian\",\n          \"Death Roll\",\n          \"Eggs\",\n          \"Jaws\",\n          \"Reptile\",\n          \"Solitary\",\n          \"Tail\",\n          \"Wetlands\"\n        ]}\n      />\n      <SearchComponent\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        setResultsVisible={setResultsVisible}\n      />\n      <SearchResults\n        resultsVisible={resultsVisible}\n        loading={loading}\n        searchQuery={searchQuery}\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisorsArray}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage}\n        fitleredAdvisors={filteredAdvisors.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}