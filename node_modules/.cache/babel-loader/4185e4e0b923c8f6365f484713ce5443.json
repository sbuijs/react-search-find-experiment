{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css'; //components\n\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Autocomplete } from './components/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //default\n  const [advisorsArray, setAdvisorsArray] = useState([]); //search\n\n  const [searchQuery, setSearchQuery] = useState(\"\"); // const [filteredAdvisors, setFilteredAvisors] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  const [resultsVisible, setResultsVisible] = useState(false); //pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10); //get data from csv file and add it to the advisorArray\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true);\n      fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n        //get advisors > split the rows into each one of the fields\n        const advisors = csv.split('\\n').slice(1);\n        const tempArray = []; //save every advisor and add it to the advisorsArray\n\n        advisors.forEach(element => {\n          const advisorData = element.split(';');\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n            Adres: {\n              Straatnaam: advisorData[1],\n              //remove spces from postcode\n              Postcode: advisorData[2].replace(/\\s+/g, ''),\n              Woonplaats: advisorData[3]\n            },\n            Website: {\n              Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n              Url: advisorData[4]\n            }\n          };\n          tempArray.push(advisor);\n        });\n        setAdvisorsArray(tempArray);\n      });\n      setLoading(false);\n    };\n\n    getData();\n  }, []); //Filter the advisorsArray based on the searchQuery\n  // useEffect(() => {\n  //   function filterAdvisors() {\n  //     const newArr = [];\n  //     advisorsArray.forEach(advisor => {\n  //       if (\n  //         advisor.Bedrijfsnaam.toLowerCase()\n  //           .includes(searchQuery.toLowerCase())\n  //         ||\n  //         advisor.Adres.Woonplaats.toLowerCase()\n  //           .includes(searchQuery.toLowerCase())) {\n  //         newArr.push(advisor)\n  //       }\n  //       return newArr\n  //     });\n  //     setFilteredAvisors(newArr)\n  //     return filteredAdvisors\n  //   }\n  //   filterAdvisors()\n  // }, [searchQuery]);\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) || advisor.Adres.Woonplaats.toLowerCase().includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor);\n      } // return newArr\n\n    });\n    return newArr;\n  }, [advisorsArray, searchQuery]);\n  console.log(filteredAdvisors); //Pagination variables\n\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor); //Set the current page number\n\n  const paginate = (e, pageNumber) => {\n    e.preventDefault();\n    setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      suggestions: [\"Alligator\", \"Bask\", \"Crocodilian\", \"Death Roll\", \"Eggs\", \"Jaws\", \"Reptile\", \"Solitary\", \"Tail\", \"Wetlands\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchComponent, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery,\n      setResultsVisible: setResultsVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      resultsVisible: resultsVisible,\n      loading: loading,\n      searchQuery: searchQuery,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisorsArray,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      fitleredAdvisors: filteredAdvisors.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sBUUFqe2NS9EIhNfEgi7cqbyJAo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["useState","useEffect","useMemo","v4","uuidv4","SearchResults","SearchComponent","Autocomplete","App","advisorsArray","setAdvisorsArray","searchQuery","setSearchQuery","loading","setLoading","resultsVisible","setResultsVisible","currentPage","setCurrentPage","advisorsPerPage","getData","fetch","then","response","text","csv","advisors","split","slice","tempArray","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Straatnaam","Postcode","replace","Woonplaats","Website","Naam","Url","push","filteredAdvisors","newArr","toLowerCase","includes","console","log","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","paginate","e","pageNumber","preventDefault","length"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\n//components\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Autocomplete } from './components/Autocomplete';\n\n\n\nfunction App() {\n\n  //default\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n  //search\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  // const [filteredAdvisors, setFilteredAvisors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [resultsVisible, setResultsVisible] = useState(false);\n\n  //pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n\n  //get data from csv file and add it to the advisorArray\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true)\n\n      fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n          //get advisors > split the rows into each one of the fields\n          const advisors = csv.split('\\n').slice(1);\n          const tempArray = [];\n\n          //save every advisor and add it to the advisorsArray\n          advisors.forEach(element => {\n            const advisorData = element.split(';')\n            let advisor = {\n              id: uuidv4(),\n              Bedrijfsnaam: advisorData[0],\n              // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n              Adres: {\n                Straatnaam: advisorData[1],\n                //remove spces from postcode\n                Postcode: advisorData[2].replace(/\\s+/g, ''),\n                Woonplaats: advisorData[3],\n\n              },\n              Website: {\n                Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n                Url: advisorData[4],\n              }\n            }\n            tempArray.push(advisor)\n          });\n          setAdvisorsArray(tempArray)\n        })\n\n      setLoading(false)\n    }\n    getData()\n  }, []);\n\n\n  //Filter the advisorsArray based on the searchQuery\n  // useEffect(() => {\n  //   function filterAdvisors() {\n  //     const newArr = [];\n  //     advisorsArray.forEach(advisor => {\n  //       if (\n  //         advisor.Bedrijfsnaam.toLowerCase()\n  //           .includes(searchQuery.toLowerCase())\n  //         ||\n  //         advisor.Adres.Woonplaats.toLowerCase()\n  //           .includes(searchQuery.toLowerCase())) {\n  //         newArr.push(advisor)\n  //       }\n  //       return newArr\n  //     });\n  //     setFilteredAvisors(newArr)\n  //     return filteredAdvisors\n  //   }\n  //   filterAdvisors()\n  // }, [searchQuery]);\n\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (\n        advisor.Bedrijfsnaam.toLowerCase()\n          .includes(searchQuery.toLowerCase())\n        ||\n        advisor.Adres.Woonplaats.toLowerCase()\n          .includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor)\n      }\n      // return newArr\n    });\n    return newArr\n  }, [advisorsArray, searchQuery]);\n\n  console.log(filteredAdvisors);\n\n  //Pagination variables\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n\n  //Set the current page number\n  const paginate = (e, pageNumber) => {\n    e.preventDefault();\n    setCurrentPage(pageNumber)\n  }\n\n  return (\n    <div className=\"App\">\n      <Autocomplete\n        suggestions={[\n          \"Alligator\",\n          \"Bask\",\n          \"Crocodilian\",\n          \"Death Roll\",\n          \"Eggs\",\n          \"Jaws\",\n          \"Reptile\",\n          \"Solitary\",\n          \"Tail\",\n          \"Wetlands\"\n        ]}\n      />\n      <SearchComponent\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        setResultsVisible={setResultsVisible}\n      />\n      <SearchResults\n        resultsVisible={resultsVisible}\n        loading={loading}\n        searchQuery={searchQuery}\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisorsArray}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage}\n        fitleredAdvisors={filteredAdvisors.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}