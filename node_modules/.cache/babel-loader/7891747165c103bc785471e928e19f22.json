{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = _ref => {\n  _s();\n\n  let {\n    suggestions\n  } = _ref;\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]); //display a new list of suggestions to the user\n\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0); //display the list with suggestions to the user\n\n  const [showSuggestions, setShowSuggestions] = useState(false); //input form the field\n\n  const [input, setInput] = useState(\"\"); //when the user changes the input value this method will fire\n\n  const onChange = e => {\n    // console.log('onchange function');\n    const userInput = e.target.value; // console.log(userInput);\n    // Filter our suggestions that don't contain the user's input\n\n    const unLinked = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    console.log(unLinked);\n    setInput(e.target.value);\n    setFilteredSuggestions(unLinked);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true);\n  }; //event that will be emitted when a user clicks on a suggestion\n\n\n  const onClick = e => {\n    setFilteredSuggestions([]);\n    setInput(e.target.innerText);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(false);\n  };\n\n  const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      //check if key is enter key\n      console.log('enter');\n    } else if (e.keyCode === 38) {\n      //check if key is arrow up\n      console.log('arrow up');\n    } else if (e.keyCode === 40) {\n      //check if key is arrow down\n      console.log('arrow down');\n\n      for (let i = 0; i < filteredSuggestions.length; i++) {\n        setActiveSuggestionIndex(activeSuggestionIndex + 1);\n        console.log('flitered');\n      }\n    }\n  };\n\n  const test = () => {\n    console.log(activeSuggestionIndex);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-autocomplete-component\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => test(),\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), showSuggestions && input && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {\n        filteredSuggestions: filteredSuggestions,\n        activeSuggestionIndex: activeSuggestionIndex,\n        onClick: onClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 46\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Autocomplete, \"ZUU+ZTVWz1FFxO+JEMSvTKiffyU=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","SuggestionsListComponent","Autocomplete","suggestions","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","input","setInput","onChange","e","userInput","target","value","unLinked","filter","suggestion","toLowerCase","indexOf","console","log","onClick","innerText","onKeyDown","keyCode","i","length","test"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent'\n\n\nexport const Autocomplete = ({ suggestions }) => {\n\n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n    //display a new list of suggestions to the user\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n    //display the list with suggestions to the user\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    //input form the field\n    const [input, setInput] = useState(\"\");\n\n    //when the user changes the input value this method will fire\n    const onChange = (e) => {\n        // console.log('onchange function');\n        const userInput = e.target.value;\n        // console.log(userInput);\n\n        // Filter our suggestions that don't contain the user's input\n        const unLinked = suggestions.filter(\n            (suggestion) =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n        console.log(unLinked);\n        setInput(e.target.value);\n        setFilteredSuggestions(unLinked)\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(true)\n    }\n\n    //event that will be emitted when a user clicks on a suggestion\n    const onClick = (e) => {\n        setFilteredSuggestions([]);\n        setInput(e.target.innerText);\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(false)\n    }\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            //check if key is enter key\n            console.log('enter');\n        } else if (e.keyCode === 38) {\n            //check if key is arrow up\n            console.log('arrow up');\n        } else if (e.keyCode === 40) {\n            //check if key is arrow down\n            console.log('arrow down');\n            for (let i = 0; i < filteredSuggestions.length; i++) {\n                setActiveSuggestionIndex(activeSuggestionIndex + 1)\n                console.log('flitered');\n            }\n        }\n\n    }\n\n\n    const test = () => {\n        console.log(activeSuggestionIndex);\n    }\n\n    return (\n        <>\n            <div className='search-autocomplete-component'>\n                <button onClick={() => test()}>test</button>\n                <input\n                    type=\"text\"\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    value={input}\n                />\n                {showSuggestions && input && <SuggestionsListComponent filteredSuggestions={filteredSuggestions} activeSuggestionIndex={activeSuggestionIndex} onClick={onClick} />}\n            </div>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}