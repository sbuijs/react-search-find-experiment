{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = _ref => {\n  _s();\n\n  let {\n    suggestions,\n    inputValue,\n    callBack\n  } = _ref;\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]); //display a new list of suggestions to the user\n\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0); //display the list with suggestions to the user\n\n  const [showSuggestions, setShowSuggestions] = useState(false); //input form the field\n  // const [input, setInput] = useState(\"\");\n  //when the user changes the input value this method will fire\n\n  const handleInput = e => {\n    e.preventDefault(); //what the user types in the searchbar\n\n    const userInput = e.target.value;\n    setSearchInput(userInput); // Filter suggestions that don't contain the user's input\n\n    const unLinked = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1); // setInput(e.target.value);\n\n    callBack(userInput);\n    setFilteredSuggestions(unLinked);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true); // inputValue(userInput)\n    //Input geeft ams terug\n    // console.log(`input: ${input}`);\n    // console.log(`userInput: ${userInput}`);\n    //suggestion geeft amsterdam terug\n    // console.log(`suggestion: ${suggestion}`);\n  }; //event that will be emitted when a user clicks on a suggestion\n\n\n  const setSuggestion = suggestion => {\n    setFilteredSuggestions([]);\n    setInput(suggestion); //Input geeft ams terug\n\n    console.log(`input: ${input}`); //suggestion geeft amsterdam terug\n\n    console.log(`suggestion: ${suggestion}`);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(false);\n  };\n\n  const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      //if key is enter keys\n      const suggestion = filteredSuggestions[activeSuggestionIndex];\n      setSuggestion(suggestion); // console.log(suggestion);\n\n      setInput(suggestion); //suggestion geeft amsterdam terug\n\n      console.log(`suggestion: ${suggestion}`); //Input geeft ams terug\n\n      console.log(`input: ${input}`);\n    } else if (e.keyCode === 38) {\n      //if key is arrow up\n      if (activeSuggestionIndex <= 0) {\n        return;\n      }\n\n      if (activeSuggestionIndex > 0) {\n        setActiveSuggestionIndex(activeSuggestionIndex - 1);\n      }\n    } else if (e.keyCode === 40) {\n      //if key is arrow down\n      if (activeSuggestionIndex <= filteredSuggestions.length) {\n        setActiveSuggestionIndex(activeSuggestionIndex + 1);\n      }\n    }\n  };\n\n  const test = () => {// console.log(input);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      autoComplete: \"off\",\n      id: \"search-field\",\n      onKeyDown: onKeyDown,\n      value: searchInput,\n      onChange: e => handleInput(e),\n      placeholder: \"Vul hier de plaatsnaam in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), showSuggestions && searchInput && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {\n      filteredSuggestions: filteredSuggestions,\n      activeSuggestionIndex: activeSuggestionIndex,\n      onClick: s => setSuggestion(s),\n      searchInput: searchInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => test(),\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Autocomplete, \"PUtHZgQZRRnTMl9uExLojCNnxLw=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","SuggestionsListComponent","Autocomplete","suggestions","inputValue","callBack","searchInput","setSearchInput","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","handleInput","e","preventDefault","userInput","target","value","unLinked","filter","suggestion","toLowerCase","indexOf","setSuggestion","setInput","console","log","input","onKeyDown","keyCode","length","test","s"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent'\n\n\nexport const Autocomplete = ({ suggestions, inputValue, callBack }) => {\n\n    const [searchInput, setSearchInput] = useState(\"\");\n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n    //display a new list of suggestions to the user\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n    //display the list with suggestions to the user\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    //input form the field\n    // const [input, setInput] = useState(\"\");\n\n    //when the user changes the input value this method will fire\n    const handleInput = (e) => {\n        e.preventDefault()\n        //what the user types in the searchbar\n        const userInput = e.target.value;\n        setSearchInput(userInput);\n\n        // Filter suggestions that don't contain the user's input\n        const unLinked = suggestions.filter(\n            (suggestion) =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n        // setInput(e.target.value);\n        callBack(userInput);\n\n        setFilteredSuggestions(unLinked)\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(true)\n        // inputValue(userInput)\n\n        //Input geeft ams terug\n        // console.log(`input: ${input}`);\n        // console.log(`userInput: ${userInput}`);\n        //suggestion geeft amsterdam terug\n        // console.log(`suggestion: ${suggestion}`);\n\n    }\n\n    //event that will be emitted when a user clicks on a suggestion\n    const setSuggestion = (suggestion) => {\n        setFilteredSuggestions([]);\n        setInput(suggestion);\n\n        //Input geeft ams terug\n        console.log(`input: ${input}`);\n        //suggestion geeft amsterdam terug\n        console.log(`suggestion: ${suggestion}`);\n\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(false)\n    }\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            //if key is enter keys\n            const suggestion = filteredSuggestions[activeSuggestionIndex]\n            setSuggestion(suggestion)\n            // console.log(suggestion);\n            setInput(suggestion)\n\n\n\n            //suggestion geeft amsterdam terug\n            console.log(`suggestion: ${suggestion}`);\n            //Input geeft ams terug\n            console.log(`input: ${input}`);\n\n\n        } else if (e.keyCode === 38) {\n            //if key is arrow up\n            if (activeSuggestionIndex <= 0) {\n                return\n            } if (activeSuggestionIndex > 0) {\n                setActiveSuggestionIndex(activeSuggestionIndex - 1)\n            }\n        } else if (e.keyCode === 40) {\n            //if key is arrow down\n            if (activeSuggestionIndex <= filteredSuggestions.length) {\n                setActiveSuggestionIndex(activeSuggestionIndex + 1)\n            }\n        }\n    }\n\n    const test = () => {\n        // console.log(input);\n    }\n\n\n    return (\n        <>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                id=\"search-field\"\n                onKeyDown={onKeyDown}\n                value={searchInput}\n                onChange={(e) => handleInput(e)}\n                placeholder='Vul hier de plaatsnaam in'\n            />\n            {showSuggestions && searchInput &&\n                <SuggestionsListComponent\n                    filteredSuggestions={filteredSuggestions}\n                    activeSuggestionIndex={activeSuggestionIndex}\n                    onClick={s => setSuggestion(s)}\n                    searchInput={searchInput}\n                />}\n            <button onClick={() => test()}>test</button>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}