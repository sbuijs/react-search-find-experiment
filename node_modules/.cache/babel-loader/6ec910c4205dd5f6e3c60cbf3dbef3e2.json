{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport const fetchAdvisors = () => {\n  return fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n    //get advisors > split the rows into each one of the fields\n    const rawAdvisors = csv.split('\\n').slice(1);\n    const parsedAdvisors = []; //save every advisor and add it to the advisorsArray\n\n    rawAdvisors.forEach(element => {\n      const advisorData = element.split(';');\n      let advisor = {\n        id: uuidv4(),\n        Bedrijfsnaam: advisorData[0],\n        // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n        Adres: {\n          Straatnaam: advisorData[1],\n          //remove spces from postcode\n          Postcode: advisorData[2].replace(/\\s+/g, ''),\n          Woonplaats: advisorData[3]\n        },\n        Website: {\n          Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n          Url: advisorData[4]\n        }\n      };\n      parsedAdvisors.push(advisor);\n    });\n    return parsedAdvisors;\n  });\n};\nexport const fetchAliases = () => {\n  console.log(`fetchAliases`);\n  return fetch('/data/aliasses_2021-12-06-075438_helz.csv').then(response => response.text()).then(csv => {\n    // console.log(csv);\n    const rawAliasses = csv.split('\\n'); // console.log(rawAliasses);\n\n    const parsedAliasses = [];\n    rawAliasses.forEach(element => {\n      const aliasData = element.split(',');\n      let aliasArray = [];\n      let alias = {\n        name1: aliasData[0],\n        name2: aliasData[1]\n      };\n\n      if (alias.name1 || alias.name2 === 'Alphen aan den rijn' || 'Alphen aan den ryn') {\n        aliasArray.push(alias);\n      } else {\n        return;\n      }\n\n      console.log(aliasArray);\n      parsedAliasses.push(aliasArray);\n    });\n    console.log(parsedAliasses);\n  });\n};","map":{"version":3,"sources":["/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/data/userRepository.js"],"names":["v4","uuidv4","fetchAdvisors","fetch","then","response","text","csv","rawAdvisors","split","slice","parsedAdvisors","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Straatnaam","Postcode","replace","Woonplaats","Website","Naam","Url","push","fetchAliases","console","log","rawAliasses","parsedAliasses","aliasData","aliasArray","alias","name1","name2"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,SAAOC,KAAK,CAAC,oCAAD,CAAL,CACFC,IADE,CACIC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADjB,EAEFF,IAFE,CAEGG,GAAG,IAAI;AAET;AACA,UAAMC,WAAW,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,CAApB;AACA,UAAMC,cAAc,GAAG,EAAvB,CAJS,CAMT;;AACAH,IAAAA,WAAW,CAACI,OAAZ,CAAoBC,OAAO,IAAI;AAC3B,YAAMC,WAAW,GAAGD,OAAO,CAACJ,KAAR,CAAc,GAAd,CAApB;AACA,UAAIM,OAAO,GAAG;AACVC,QAAAA,EAAE,EAAEf,MAAM,EADA;AAEVgB,QAAAA,YAAY,EAAEH,WAAW,CAAC,CAAD,CAFf;AAGV;AACAI,QAAAA,KAAK,EAAE;AACHC,UAAAA,UAAU,EAAEL,WAAW,CAAC,CAAD,CADpB;AAEH;AACAM,UAAAA,QAAQ,EAAEN,WAAW,CAAC,CAAD,CAAX,CAAeO,OAAf,CAAuB,MAAvB,EAA+B,EAA/B,CAHP;AAIHC,UAAAA,UAAU,EAAER,WAAW,CAAC,CAAD;AAJpB,SAJG;AAWVS,QAAAA,OAAO,EAAE;AACLC,UAAAA,IAAI,EAAEV,WAAW,CAAC,CAAD,CAAX,CAAeO,OAAf,CAAuB,cAAvB,EAAuC,EAAvC,EAA2CA,OAA3C,CAAmD,aAAnD,EAAkE,EAAlE,CADD;AAELI,UAAAA,GAAG,EAAEX,WAAW,CAAC,CAAD;AAFX;AAXC,OAAd;AAgBAH,MAAAA,cAAc,CAACe,IAAf,CAAoBX,OAApB;AACH,KAnBD;AAoBA,WAAOJ,cAAP;AACH,GA9BE,CAAP;AA+BH,CAhCM;AAmCP,OAAO,MAAMgB,YAAY,GAAG,MAAM;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAb;AACA,SAAO1B,KAAK,CAAC,2CAAD,CAAL,CACFC,IADE,CACIC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADjB,EAEFF,IAFE,CAEGG,GAAG,IAAI;AACT;AACA,UAAMuB,WAAW,GAAGvB,GAAG,CAACE,KAAJ,CAAU,IAAV,CAApB,CAFS,CAGT;;AACA,UAAMsB,cAAc,GAAG,EAAvB;AAEAD,IAAAA,WAAW,CAAClB,OAAZ,CAAoBC,OAAO,IAAI;AAC3B,YAAMmB,SAAS,GAAGnB,OAAO,CAACJ,KAAR,CAAc,GAAd,CAAlB;AAEA,UAAIwB,UAAU,GAAG,EAAjB;AAEA,UAAIC,KAAK,GAAG;AACRC,QAAAA,KAAK,EAAEH,SAAS,CAAC,CAAD,CADR;AAERI,QAAAA,KAAK,EAAEJ,SAAS,CAAC,CAAD;AAFR,OAAZ;;AAKA,UAAIE,KAAK,CAACC,KAAN,IAAeD,KAAK,CAACE,KAAN,KAAgB,qBAA/B,IAAwD,oBAA5D,EAAkF;AAC9EH,QAAAA,UAAU,CAACP,IAAX,CAAgBQ,KAAhB;AACH,OAFD,MAEO;AACH;AACH;;AACDN,MAAAA,OAAO,CAACC,GAAR,CAAYI,UAAZ;AAEAF,MAAAA,cAAc,CAACL,IAAf,CAAoBO,UAApB;AACH,KAlBD;AAoBAL,IAAAA,OAAO,CAACC,GAAR,CAAYE,cAAZ;AAEH,GA9BE,CAAP;AA+BH,CAjCM","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n\nexport const fetchAdvisors = () => {\n    return fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n            //get advisors > split the rows into each one of the fields\n            const rawAdvisors = csv.split('\\n').slice(1);\n            const parsedAdvisors = [];\n\n            //save every advisor and add it to the advisorsArray\n            rawAdvisors.forEach(element => {\n                const advisorData = element.split(';')\n                let advisor = {\n                    id: uuidv4(),\n                    Bedrijfsnaam: advisorData[0],\n                    // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n                    Adres: {\n                        Straatnaam: advisorData[1],\n                        //remove spces from postcode\n                        Postcode: advisorData[2].replace(/\\s+/g, ''),\n                        Woonplaats: advisorData[3],\n\n                    },\n                    Website: {\n                        Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n                        Url: advisorData[4],\n                    }\n                }\n                parsedAdvisors.push(advisor)\n            });\n            return parsedAdvisors;\n        })\n}\n\n\nexport const fetchAliases = () => {\n    console.log(`fetchAliases`);\n    return fetch('/data/aliasses_2021-12-06-075438_helz.csv')\n        .then((response) => response.text())\n        .then(csv => {\n            // console.log(csv);\n            const rawAliasses = csv.split('\\n');\n            // console.log(rawAliasses);\n            const parsedAliasses = [];\n\n            rawAliasses.forEach(element => {\n                const aliasData = element.split(',')\n\n                let aliasArray = []\n\n                let alias = {\n                    name1: aliasData[0],\n                    name2: aliasData[1]\n                }\n\n                if (alias.name1 || alias.name2 === 'Alphen aan den rijn' || 'Alphen aan den ryn') {\n                    aliasArray.push(alias)\n                } else {\n                    return\n                }\n                console.log(aliasArray);\n\n                parsedAliasses.push(aliasArray)\n            })\n\n            console.log(parsedAliasses);\n\n        })\n}"]},"metadata":{},"sourceType":"module"}