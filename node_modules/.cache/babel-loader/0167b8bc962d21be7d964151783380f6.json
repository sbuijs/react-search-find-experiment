{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport const fetchAdvisors = () => {\n  return fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n    //get advisors > split the rows into each one of the fields\n    const rawAdvisors = csv.split('\\n').slice(1);\n    const parsedAdvisors = []; //save every advisor and add it to the advisorsArray\n\n    rawAdvisors.forEach(element => {\n      const advisorData = element.split(';');\n      let advisor = {\n        id: uuidv4(),\n        Bedrijfsnaam: advisorData[0],\n        // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n        Adres: {\n          Straatnaam: advisorData[1],\n          //remove spces from postcode\n          Postcode: advisorData[2].replace(/\\s+/g, ''),\n          Woonplaats: advisorData[3]\n        },\n        Website: {\n          Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n          Url: advisorData[4]\n        }\n      };\n      parsedAdvisors.push(advisor);\n    }); // console.log(parsedAdvisors);\n\n    return parsedAdvisors;\n  });\n};\nexport const fetchAliases = () => {\n  return fetch('/data/aliasses_2021-12-06-075438_helz.csv').then(response => response.text()).then(csv => {\n    const rawAliasses = csv.split('\\n');\n    const parsedAliasses = [];\n    rawAliasses.forEach(element => {\n      const aliasData = element.split(',');\n      let alias = {\n        name0: aliasData[0],\n        name1: aliasData[1]\n      };\n      parsedAliasses.push(alias);\n    }); // console.log(parsedAliasses);\n\n    aliasCollection(parsedAliasses);\n    return parsedAliasses;\n  });\n};\n\nconst aliasCollection = parsedAliasses => {\n  const checkSamePlace = (alias1, alias2) => {\n    if (alias1.name0.includes(alias2.name1 || alias2.name2) || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n      return true;\n    }\n\n    return false;\n  }; //hierin bewaren we arrays die per array alle aliassen bevatten van 1 stad\n\n\n  const allAliases = []; //voor elke alias loopen we door deze functie\n\n  for (let i = 0; i < 10 - 1; i++) {\n    console.log(parsedAliasses.indexOf); //voor de huidige alias wordt er een array aangemaakt\n\n    let oneCityArray = []; //de waardes van de huidige alias worden aan de oneCity array toegevoegd\n\n    oneCityArray.push(parsedAliasses[i].name0);\n    oneCityArray.push(parsedAliasses[i].name1); //Als de huidige alias, en de daarop volgende alias dezelfde waarden bevatten\n    //voegen we de waarden van de tweede rij ook aan de oneCity array toe\n\n    if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n      //if the name does not exsist in the array, add it\n      if (!oneCityArray.includes(parsedAliasses[i + 1].name0)) {\n        oneCityArray.push(parsedAliasses[i + 1].name0);\n      } //if the name of the second name does not exsist in the array, add it\n\n\n      if (!oneCityArray.includes(parsedAliasses[i + 1].name1)) {\n        oneCityArray.push(parsedAliasses[i + 1].name1);\n      } // i++\n\n    } //de oneCity array voegen we toe aan de all Aliases array\n\n\n    console.log(oneCityArray);\n    allAliases.push(oneCityArray);\n  }\n\n  console.log(allAliases);\n}; // const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     const allAliases = [];\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2)\n//             || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n//     for (let i = 0; i < 10 - 1; i++) {\n//         let oneCityArray = [];\n//         oneCityArray.push(parsedAliasses[i].name0)\n//         oneCityArray.push(parsedAliasses[i].name1)\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             //if the name does not exsist in the array, add it\n//             if (!oneCityArray.includes(parsedAliasses[i + 1].name0)) {\n//                 oneCityArray.push(parsedAliasses[i + 1].name0)\n//             }\n//             //if the name of the second name does not exsist in the array, add it\n//             if (!oneCityArray.includes(parsedAliasses[i + 1].name1)) {\n//                 oneCityArray.push(parsedAliasses[i + 1].name1)\n//             }\n//         }\n//         else if (!checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             // allAliases.push(oneCityArray)\n//         }\n//         console.log(oneCityArray);\n//     }\n//     // console.log(allAliases);\n// }\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     const allAliases = [];\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2) || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         let oneCityArray = [];\n//         oneCityArray.push(parsedAliasses[i])\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             oneCityArray.push(parsedAliasses[i + 1])\n//         }\n//         else if (!checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             allAliases.push(oneCityArray)\n//         }\n//     }\n//     console.log(allAliases);\n// }\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     let collection = [];\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         // console.log(parsedAliasses[i]);\n//         let collectionOfAliasses = [];\n//         if (parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name2) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name2)\n//         ) {\n//             collectionOfAliasses.push(parsedAliasses[i])\n//             collection.push(collectionOfAliasses)\n//         }\n//     }\n//     console.log(collection);\n// }\n// const arrayOne = [{ \"color\": \"blue\" }, { \"color\": \"green\" }, { \"color\": \"yellow\" }];\n// const arrayTwo = [{ \"material\": \"steel\" }, { \"material\": \"glass\" }, { \"material\": \"water\" }];\n// console.log(arrayOne);\n// console.log(arrayTwo);\n// function test() {\n//     for (let i = 0; i <= arrayOne.length - 1; i++) {\n//         for (let j = 0; j <= arrayTwo.length - 1; j++) {\n//             console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n//         }\n//     }\n// }\n// test()\n// const arrayOne = [{ \"color\": \"blue\" }, { \"color\": \"green\" }, { \"color\": \"yellow\" }];\n// const arrayTwo = [{ \"material\": \"steel\" }, { \"material\": \"glass\" }, { \"material\": \"water\" }];\n// // console.log(arrayOne);\n// // console.log(arrayTwo);\n// function test() {\n//     for (let i = 0; i <= arrayOne.length - 1; i++) {\n//         let newArray = [];\n//         for (let j = 0; j <= arrayTwo.length - 1; j++) {\n//             console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n//             newArray.push(arrayOne[i])\n//             newArray.push(arrayTwo[i])\n//         }\n//         console.log(newArray);\n//     }\n// }\n// test()\n// const testArray = [\n//     { color0: \"Yellow\", color1: \"Blue\" },\n//     { color0: \"Green\", color1: \"Blue\" },\n//     { color0: \"Pink\", color1: \"Gray\" },\n//     { color0: \"Red\", color1: \"Purple\" },\n//     { color0: \"Blue\", color1: \"Red\" },\n// ];\n// console.log(testArray);\n// function isBlue(testArray) {\n//     let colors = [];\n//     for (let i = 0; i <= testArray.length - 1; i++) {\n//         console.log(i);\n//         if (testArray[i].color0.includes(\"yellow\")) {\n//             colors.push(testArray[i])\n//             // return true\n//         }\n//         // return false\n//     }\n//     console.log(colors);\n// }\n// isBlue(testArray)\n// // console.log(isBlue(testArray));\n// function isBlue(testArray) {\n//     let colors = [];\n//     for (let i = 0; i <= testArray.length - 1; i++) {\n//         if (testArray[i].color0.toLowerCase() === \"blue\" || testArray[i].color1.toLowerCase() === \"blue\") {\n//             colors.push(testArray[i])\n//         }\n//     }\n//     console.log(colors);\n// }\n// isBlue(testArray)\n// Beoogde resultaat: een array met arrays daarin die kleuren bevatten. \n// const aliassen = [\n//     { name0: \"Den haag\", name1: \"sgravenhage\" },\n//     { name0: \"De haag\", name1: \"sgravenhage\" },\n//     { name0: \"Sint - Oedenrode\", name1: \"Sint Oedenrode\" },\n//     { name0: \"Sint Oedenrode\", name1: \"Sint - Oedenrode\" },\n// ];\n// function looptieLoop(aliassen) {\n//     const allAliases = [];\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2)\n//             || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n//     let oneCityArray = [];\n//     // for (let i = 0; i <= aliassen.length - 1; i++) {\n//     //     oneCityArray.push(aliassen[i])\n//     //     console.log(aliassen[i]);\n//     // }\n// }\n// looptieLoop(aliassen)\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     const allAliases = [];\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2) || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         let oneCityArray = [];\n//         oneCityArray.push(parsedAliasses[i])\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             oneCityArray.push(parsedAliasses[i + 1])\n//         }\n//         else if (!checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             allAliases.push(oneCityArray)\n//         }\n//     }\n//     console.log(allAliases);\n// }","map":{"version":3,"sources":["/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/data/userRepository.js"],"names":["v4","uuidv4","fetchAdvisors","fetch","then","response","text","csv","rawAdvisors","split","slice","parsedAdvisors","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Straatnaam","Postcode","replace","Woonplaats","Website","Naam","Url","push","fetchAliases","rawAliasses","parsedAliasses","aliasData","alias","name0","name1","aliasCollection","checkSamePlace","alias1","alias2","includes","name2","allAliases","i","console","log","indexOf","oneCityArray"],"mappings":"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":["import { v4 as uuidv4 } from 'uuid';\n\n\nexport const fetchAdvisors = () => {\n    return fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n            //get advisors > split the rows into each one of the fields\n            const rawAdvisors = csv.split('\\n').slice(1);\n            const parsedAdvisors = [];\n\n            //save every advisor and add it to the advisorsArray\n            rawAdvisors.forEach(element => {\n                const advisorData = element.split(';')\n                let advisor = {\n                    id: uuidv4(),\n                    Bedrijfsnaam: advisorData[0],\n                    // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n                    Adres: {\n                        Straatnaam: advisorData[1],\n                        //remove spces from postcode\n                        Postcode: advisorData[2].replace(/\\s+/g, ''),\n                        Woonplaats: advisorData[3],\n\n                    },\n                    Website: {\n                        Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n                        Url: advisorData[4],\n                    }\n                }\n                parsedAdvisors.push(advisor)\n            });\n            // console.log(parsedAdvisors);\n            return parsedAdvisors;\n        })\n}\n\n\nexport const fetchAliases = () => {\n    return fetch('/data/aliasses_2021-12-06-075438_helz.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n            const rawAliasses = csv.split('\\n');\n            const parsedAliasses = [];\n\n            rawAliasses.forEach(element => {\n                const aliasData = element.split(',')\n\n                let alias = {\n                    name0: aliasData[0],\n                    name1: aliasData[1]\n                }\n                parsedAliasses.push(alias)\n            });\n            // console.log(parsedAliasses);\n            aliasCollection(parsedAliasses)\n            return parsedAliasses;\n        })\n}\n\n\n\n\nconst aliasCollection = (parsedAliasses) => {\n\n    const checkSamePlace = (alias1, alias2) => {\n        if (alias1.name0.includes(alias2.name1 || alias2.name2)\n            || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n            return true;\n        }\n        return false;\n    }\n\n    //hierin bewaren we arrays die per array alle aliassen bevatten van 1 stad\n    const allAliases = [];\n\n    //voor elke alias loopen we door deze functie\n    for (let i = 0; i < 10 - 1; i++) {\n        console.log(parsedAliasses.indexOf);\n        //voor de huidige alias wordt er een array aangemaakt\n        let oneCityArray = [];\n\n        //de waardes van de huidige alias worden aan de oneCity array toegevoegd\n        oneCityArray.push(parsedAliasses[i].name0)\n        oneCityArray.push(parsedAliasses[i].name1)\n\n\n        //Als de huidige alias, en de daarop volgende alias dezelfde waarden bevatten\n        //voegen we de waarden van de tweede rij ook aan de oneCity array toe\n        if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n            //if the name does not exsist in the array, add it\n            if (!oneCityArray.includes(parsedAliasses[i + 1].name0)) {\n                oneCityArray.push(parsedAliasses[i + 1].name0)\n            }\n            //if the name of the second name does not exsist in the array, add it\n            if (!oneCityArray.includes(parsedAliasses[i + 1].name1)) {\n                oneCityArray.push(parsedAliasses[i + 1].name1)\n            }\n            // i++\n        }\n\n\n        //de oneCity array voegen we toe aan de all Aliases array\n        console.log(oneCityArray);\n        allAliases.push(oneCityArray)\n    }\n\n    console.log(allAliases);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n\n//     const allAliases = [];\n\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2)\n//             || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n\n//     for (let i = 0; i < 10 - 1; i++) {\n//         let oneCityArray = [];\n//         oneCityArray.push(parsedAliasses[i].name0)\n//         oneCityArray.push(parsedAliasses[i].name1)\n\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             //if the name does not exsist in the array, add it\n//             if (!oneCityArray.includes(parsedAliasses[i + 1].name0)) {\n//                 oneCityArray.push(parsedAliasses[i + 1].name0)\n//             }\n//             //if the name of the second name does not exsist in the array, add it\n//             if (!oneCityArray.includes(parsedAliasses[i + 1].name1)) {\n//                 oneCityArray.push(parsedAliasses[i + 1].name1)\n//             }\n//         }\n//         else if (!checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             // allAliases.push(oneCityArray)\n//         }\n//         console.log(oneCityArray);\n//     }\n\n//     // console.log(allAliases);\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n\n//     const allAliases = [];\n\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2) || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         let oneCityArray = [];\n//         oneCityArray.push(parsedAliasses[i])\n\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             oneCityArray.push(parsedAliasses[i + 1])\n//         }\n//         else if (!checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             allAliases.push(oneCityArray)\n//         }\n//     }\n\n//     console.log(allAliases);\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     let collection = [];\n\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         // console.log(parsedAliasses[i]);\n//         let collectionOfAliasses = [];\n\n//         if (parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name2) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name2)\n//         ) {\n//             collectionOfAliasses.push(parsedAliasses[i])\n//             collection.push(collectionOfAliasses)\n//         }\n\n//     }\n\n\n//     console.log(collection);\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const arrayOne = [{ \"color\": \"blue\" }, { \"color\": \"green\" }, { \"color\": \"yellow\" }];\n// const arrayTwo = [{ \"material\": \"steel\" }, { \"material\": \"glass\" }, { \"material\": \"water\" }];\n// console.log(arrayOne);\n// console.log(arrayTwo);\n\n// function test() {\n//     for (let i = 0; i <= arrayOne.length - 1; i++) {\n//         for (let j = 0; j <= arrayTwo.length - 1; j++) {\n//             console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n//         }\n//     }\n// }\n\n// test()\n\n\n\n// const arrayOne = [{ \"color\": \"blue\" }, { \"color\": \"green\" }, { \"color\": \"yellow\" }];\n// const arrayTwo = [{ \"material\": \"steel\" }, { \"material\": \"glass\" }, { \"material\": \"water\" }];\n// // console.log(arrayOne);\n// // console.log(arrayTwo);\n\n// function test() {\n\n//     for (let i = 0; i <= arrayOne.length - 1; i++) {\n//         let newArray = [];\n//         for (let j = 0; j <= arrayTwo.length - 1; j++) {\n//             console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n//             newArray.push(arrayOne[i])\n//             newArray.push(arrayTwo[i])\n//         }\n\n//         console.log(newArray);\n//     }\n\n// }\n\n// test()\n\n\n\n// const testArray = [\n//     { color0: \"Yellow\", color1: \"Blue\" },\n//     { color0: \"Green\", color1: \"Blue\" },\n//     { color0: \"Pink\", color1: \"Gray\" },\n//     { color0: \"Red\", color1: \"Purple\" },\n//     { color0: \"Blue\", color1: \"Red\" },\n// ];\n// console.log(testArray);\n\n// function isBlue(testArray) {\n//     let colors = [];\n//     for (let i = 0; i <= testArray.length - 1; i++) {\n//         console.log(i);\n//         if (testArray[i].color0.includes(\"yellow\")) {\n//             colors.push(testArray[i])\n//             // return true\n//         }\n//         // return false\n//     }\n//     console.log(colors);\n// }\n\n// isBlue(testArray)\n// // console.log(isBlue(testArray));\n\n\n\n// function isBlue(testArray) {\n//     let colors = [];\n//     for (let i = 0; i <= testArray.length - 1; i++) {\n//         if (testArray[i].color0.toLowerCase() === \"blue\" || testArray[i].color1.toLowerCase() === \"blue\") {\n//             colors.push(testArray[i])\n//         }\n//     }\n//     console.log(colors);\n// }\n\n// isBlue(testArray)\n\n// Beoogde resultaat: een array met arrays daarin die kleuren bevatten. \n\n\n// const aliassen = [\n//     { name0: \"Den haag\", name1: \"sgravenhage\" },\n//     { name0: \"De haag\", name1: \"sgravenhage\" },\n//     { name0: \"Sint - Oedenrode\", name1: \"Sint Oedenrode\" },\n//     { name0: \"Sint Oedenrode\", name1: \"Sint - Oedenrode\" },\n// ];\n\n\n// function looptieLoop(aliassen) {\n//     const allAliases = [];\n\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2)\n//             || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n//     let oneCityArray = [];\n\n//     // for (let i = 0; i <= aliassen.length - 1; i++) {\n//     //     oneCityArray.push(aliassen[i])\n//     //     console.log(aliassen[i]);\n//     // }\n\n// }\n\n// looptieLoop(aliassen)\n\n\n\n\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n\n//     const allAliases = [];\n\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2) || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         let oneCityArray = [];\n//         oneCityArray.push(parsedAliasses[i])\n\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             oneCityArray.push(parsedAliasses[i + 1])\n//         }\n//         else if (!checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             allAliases.push(oneCityArray)\n//         }\n//     }\n\n//     console.log(allAliases);\n// }"]},"metadata":{},"sourceType":"module"}