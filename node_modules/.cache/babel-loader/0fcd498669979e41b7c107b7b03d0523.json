{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent'; // import { ListOfEntries } from './components/ListOfEntries';\n\nimport { useState, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisorsArray, setAdvisorsArray] = useState([]); // only works when the file is in the public folder\n\n  function getData() {\n    fetch('/data/advisors_10000.csv').then(response => response.text()).then(csv => {\n      //split the data based on the line break, and remove the first row\n      const advisors = csv.split('\\n').slice(1); //split the rows into each one of the fields\n\n      advisorsInfos(advisors); //set the array\n\n      setAdvisorsArray(advisorsArray);\n    });\n  }\n\n  const advisorsInfos = useMemo(advisors => {\n    //array to save all the objects in\n    const advisorsArray = [];\n    advisors.forEach(element => {\n      const advisorData = element.split(';');\n      let advisor = {\n        Bedrijfsnaam: advisorData[0],\n        Adres: advisorData[1],\n        Postcode: advisorData[2],\n        Woonplaats: advisorData[3],\n        Website: advisorData[4]\n      };\n      advisorsArray.push(advisor);\n    });\n    return advisorsInfos;\n  }, []);\n  getData(); //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n  //The thing that separates the things is a line break.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(SearchComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"roT2/sXGNnlDoucWkSnJbEddsxE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","useState","useMemo","App","advisorsArray","setAdvisorsArray","getData","fetch","then","response","text","csv","advisors","split","slice","advisorsInfos","forEach","element","advisorData","advisor","Bedrijfsnaam","Adres","Postcode","Woonplaats","Website","push"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,eAAT,QAAgC,8BAAhC,C,CACA;;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,EAAD,CAAlD,CAFa,CAKb;;AACA,WAASK,OAAT,GAAmB;AACjBC,IAAAA,KAAK,CAAC,0BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAEQG,GAAG,IAAI;AAEX;AACA,YAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,CAAjB,CAHW,CAOX;;AACAC,MAAAA,aAAa,CAACH,QAAD,CAAb,CARW,CAWX;;AAEAP,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,KAhBH;AAiBD;;AAGD,QAAMW,aAAa,GAAGb,OAAO,CAAEU,QAAD,IAAc;AAC1C;AACA,UAAMR,aAAa,GAAG,EAAtB;AACAQ,IAAAA,QAAQ,CAACI,OAAT,CAAiBC,OAAO,IAAI;AAC1B,YAAMC,WAAW,GAAGD,OAAO,CAACJ,KAAR,CAAc,GAAd,CAApB;AACA,UAAIM,OAAO,GAAG;AACZC,QAAAA,YAAY,EAAEF,WAAW,CAAC,CAAD,CADb;AAEZG,QAAAA,KAAK,EAAEH,WAAW,CAAC,CAAD,CAFN;AAGZI,QAAAA,QAAQ,EAAEJ,WAAW,CAAC,CAAD,CAHT;AAIZK,QAAAA,UAAU,EAAEL,WAAW,CAAC,CAAD,CAJX;AAKZM,QAAAA,OAAO,EAAEN,WAAW,CAAC,CAAD;AALR,OAAd;AAOAd,MAAAA,aAAa,CAACqB,IAAd,CAAmBN,OAAnB;AACD,KAVD;AAWA,WAAOJ,aAAP;AACD,GAf4B,EAe1B,EAf0B,CAA7B;AAmBAT,EAAAA,OAAO,GA9CM,CAmDb;AACA;AAEA;AACA;AAEA;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAnEQH,G;;KAAAA,G;AAqET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent'\n// import { ListOfEntries } from './components/ListOfEntries';\nimport { useState, useMemo } from 'react';\n\n\n\nfunction App() {\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n\n  // only works when the file is in the public folder\n  function getData() {\n    fetch('/data/advisors_10000.csv')\n      .then((response) => response.text())\n      .then(csv => {\n\n        //split the data based on the line break, and remove the first row\n        const advisors = csv.split('\\n').slice(1);\n\n\n\n        //split the rows into each one of the fields\n        advisorsInfos(advisors)\n\n\n        //set the array\n\n        setAdvisorsArray(advisorsArray)\n      })\n  }\n\n\n  const advisorsInfos = useMemo((advisors) => {\n    //array to save all the objects in\n    const advisorsArray = [];\n    advisors.forEach(element => {\n      const advisorData = element.split(';')\n      let advisor = {\n        Bedrijfsnaam: advisorData[0],\n        Adres: advisorData[1],\n        Postcode: advisorData[2],\n        Woonplaats: advisorData[3],\n        Website: advisorData[4]\n      }\n      advisorsArray.push(advisor)\n    })\n    return advisorsInfos;\n  }, []);\n\n\n\n  getData()\n\n\n\n\n  //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n\n  //The thing that separates the things is a line break.\n\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={() => getData()}>Getdata</button> */}\n      <SearchComponent />\n      {/* <ListOfEntries advisorsArray={advisorsArray} /> */}\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}