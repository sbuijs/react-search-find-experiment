{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Advisors } from './components/Advisors';\nimport { Pagination } from './components/Pagination';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { render } from 'node-sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Advisors\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [loading, setLoading] = useState(true); //Search function\n\n  const [searchQuery, setSearchQuery] = useState(\"\"); //Pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(50);\n  const [filteredAdvisors, setFilteredAvisors] = useState([]); //get data from csv file\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true);\n      fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n        //getting the advisors from the cv file\n        //and split the rows into each one of the fields\n        const advisors = csv.split('\\n').slice(1);\n        const advisorsArray = [];\n        advisors.forEach(element => {\n          const advisorData = element.split(';');\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n            Website: advisorData[4]\n          };\n          advisorsArray.push(advisor);\n        });\n        setAdvisorsArray(advisorsArray);\n      });\n      setLoading(false);\n    };\n\n    getData();\n  }, [loading]); //filter advisors based on searchQuery\n\n  useEffect(() => {\n    function filterAdvisors() {\n      const newArr = [];\n      advisorsArray.forEach(advisor => {\n        if (advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) || advisor.Adres.toLowerCase().includes(searchQuery.toLowerCase())) {\n          newArr.push(advisor);\n        }\n\n        return newArr;\n      });\n      setFilteredAvisors(newArr);\n      return filteredAdvisors;\n    }\n\n    filterAdvisors();\n  }, [searchQuery]); //get current advisors for pagination\n\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor);\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Advisors, {\n      loading: loading,\n      searchQuery: searchQuery //currentAdvisors comes from the pagination\n      ,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisorsArray,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      totalAdvisors: filteredAdvisors.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3MyxqRy7/6HrtB9q9BnOUbcrAas=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","Advisors","Pagination","useState","useEffect","v4","uuidv4","render","App","advisorsArray","setAdvisorsArray","loading","setLoading","searchQuery","setSearchQuery","currentPage","setCurrentPage","advisorsPerPage","filteredAdvisors","setFilteredAvisors","getData","fetch","then","response","text","csv","advisors","split","slice","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Website","push","filterAdvisors","newArr","toLowerCase","includes","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","paginate","pageNumber","length"],"mappings":"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","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Advisors } from './components/Advisors';\nimport { Pagination } from './components/Pagination';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { render } from 'node-sass';\n\nfunction App() {\n\n  //Advisors\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n\n  //Search function\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  //Pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(50);\n\n  const [filteredAdvisors, setFilteredAvisors] = useState([]);\n\n\n  //get data from csv file\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true)\n      fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n          //getting the advisors from the cv file\n          //and split the rows into each one of the fields\n          const advisors = csv.split('\\n').slice(1);\n          const advisorsArray = [];\n\n          advisors.forEach(element => {\n            const advisorData = element.split(';')\n            let advisor = {\n              id: uuidv4(),\n              Bedrijfsnaam: advisorData[0],\n              Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n              Website: advisorData[4]\n            }\n            advisorsArray.push(advisor)\n          });\n          setAdvisorsArray(advisorsArray)\n        })\n      setLoading(false)\n    }\n\n    getData()\n  }, [loading]);\n\n\n  //filter advisors based on searchQuery\n  useEffect(() => {\n    function filterAdvisors() {\n      const newArr = [];\n      advisorsArray.forEach(advisor => {\n        if (\n          advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          advisor.Adres.toLowerCase().includes(searchQuery.toLowerCase())) {\n          newArr.push(advisor)\n        }\n        return newArr\n      });\n      setFilteredAvisors(newArr)\n      return filteredAdvisors\n    }\n    filterAdvisors()\n  }, [searchQuery]);\n\n  //get current advisors for pagination\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchComponent searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n      <Advisors\n        loading={loading}\n        searchQuery={searchQuery}\n        //currentAdvisors comes from the pagination\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisorsArray}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage} />\n      <Pagination currentPage={currentPage} advisorsPerPage={advisorsPerPage} totalAdvisors={filteredAdvisors.length} paginate={paginate} />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}