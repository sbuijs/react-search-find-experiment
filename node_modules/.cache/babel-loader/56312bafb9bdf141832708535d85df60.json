{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css'; //components\n\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //default\n  const [advisorsArray, setAdvisorsArray] = useState([]); //search\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredAdvisors, setFilteredAvisors] = useState([]);\n  const [loading, setLoading] = useState(true); //pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10); //get data from csv file and add it to the advisorArray\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true);\n      fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n        //get advisors > split the rows into each one of the fields\n        const advisors = csv.split('\\n').slice(1);\n        const array = []; //save every advisor and add it to the advisorsArray\n\n        advisors.forEach(element => {\n          const advisorData = element.split(';');\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n            Adres: {\n              straatnaam: advisorData[1],\n              postcode: advisorData[2],\n              woonplaats: advisorData[3]\n            },\n            Website: advisorData[4]\n          };\n          array.push(advisor);\n        });\n        setAdvisorsArray(advisorsArray);\n      });\n      setLoading(false);\n    };\n\n    console.log(advisorsArray);\n    getData();\n  }, []); //Filter the advisorsArray based on the searchQuery\n\n  useEffect(() => {\n    function filterAdvisors() {\n      const newArr = [];\n      advisorsArray.forEach(advisor => {\n        if (advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) || advisor.Adres.toLowerCase().includes(searchQuery.toLowerCase())) {\n          newArr.push(advisor);\n        }\n\n        return newArr;\n      });\n      setFilteredAvisors(newArr);\n      return filteredAdvisors;\n    }\n\n    filterAdvisors();\n    console.log('hoevaak wordt dit gerenderd?');\n  }, [searchQuery]); //Pagination variables\n\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor); //Set the current page number\n\n  const paginate = (e, pageNumber) => {\n    e.preventDefault();\n    setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      loading: loading,\n      searchQuery: searchQuery,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisorsArray,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      fitleredAdvisors: filteredAdvisors.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"GrNYYYQpk7NPqRplCkA8XCtMoY0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["useState","useEffect","v4","uuidv4","SearchResults","SearchComponent","App","advisorsArray","setAdvisorsArray","searchQuery","setSearchQuery","filteredAdvisors","setFilteredAvisors","loading","setLoading","currentPage","setCurrentPage","advisorsPerPage","getData","fetch","then","response","text","csv","advisors","split","slice","array","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","straatnaam","postcode","woonplaats","Website","push","console","log","filterAdvisors","newArr","toLowerCase","includes","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","paginate","e","pageNumber","preventDefault","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\n//components\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\n\n\nfunction App() {\n\n  //default\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n  //search\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredAdvisors, setFilteredAvisors] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  //pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n\n\n  //get data from csv file and add it to the advisorArray\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true)\n\n      fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n          //get advisors > split the rows into each one of the fields\n          const advisors = csv.split('\\n').slice(1);\n          const array = [];\n\n          //save every advisor and add it to the advisorsArray\n          advisors.forEach(element => {\n            const advisorData = element.split(';')\n            let advisor = {\n              id: uuidv4(),\n              Bedrijfsnaam: advisorData[0],\n              // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n              Adres: {\n                straatnaam: advisorData[1],\n                postcode: advisorData[2],\n                woonplaats: advisorData[3],\n              },\n              Website: advisorData[4]\n            }\n            array.push(advisor)\n          });\n          setAdvisorsArray(advisorsArray)\n        })\n      setLoading(false)\n    }\n    console.log(advisorsArray);\n    getData()\n  }, []);\n\n\n  //Filter the advisorsArray based on the searchQuery\n  useEffect(() => {\n    function filterAdvisors() {\n      const newArr = [];\n      advisorsArray.forEach(advisor => {\n        if (\n          advisor.Bedrijfsnaam.toLowerCase()\n            .includes(searchQuery.toLowerCase())\n          ||\n          advisor.Adres.toLowerCase()\n            .includes(searchQuery.toLowerCase())) {\n          newArr.push(advisor)\n        }\n        return newArr\n      });\n      setFilteredAvisors(newArr)\n      return filteredAdvisors\n    }\n    filterAdvisors()\n    console.log('hoevaak wordt dit gerenderd?');\n  }, [searchQuery]);\n\n  //Pagination variables\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n\n  //Set the current page number\n  const paginate = (e, pageNumber) => {\n    e.preventDefault();\n    setCurrentPage(pageNumber)\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchComponent\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n      />\n      <SearchResults\n        loading={loading}\n        searchQuery={searchQuery}\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisorsArray}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage}\n        fitleredAdvisors={filteredAdvisors.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}