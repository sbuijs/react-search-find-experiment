{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { ListOfEntries } from './components/ListOfEntries';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisorsArray, setAdvisorsArray] = useState([]); // only works when the file is in the public folder\n\n  function getData() {\n    fetch('/data/advisors_10000.csv').then(response => response.text()).then(csv => {\n      //split the data based on the line break, and remove the first row\n      const advisors = csv.split('\\n').slice(1); //array to save all the objects in\n\n      const advisorsArray = []; //split the rows into each one of the fields\n\n      investmentInfos(advisors);\n    });\n  }\n\n  const investmentInfos = useMemo(advisors => {\n    advisors.forEach(element => {\n      const advisorData = element.split(';');\n      let advisor = {\n        Bedrijfsnaam: advisorData[0],\n        Adres: advisorData[1],\n        Postcode: advisorData[2],\n        Woonplaats: advisorData[3],\n        Website: advisorData[4]\n      };\n      advisorsArray.push(advisor);\n    }); //set the array\n\n    setAdvisorsArray(advisorsArray);\n  }, [investments]);\n  getData(); //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n  //The thing that separates the things is a line break.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListOfEntries, {\n      advisorsArray: advisorsArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"DzNeE/ix3JGJb9yOk+snbSsqLPo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","ListOfEntries","useState","App","advisorsArray","setAdvisorsArray","getData","fetch","then","response","text","csv","advisors","split","slice","investmentInfos","useMemo","forEach","element","advisorData","advisor","Bedrijfsnaam","Adres","Postcode","Woonplaats","Website","push","investments"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,eAAT,QAAgC,8BAAhC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCH,QAAQ,CAAC,EAAD,CAAlD,CAFa,CAKb;;AACA,WAASI,OAAT,GAAmB;AACjBC,IAAAA,KAAK,CAAC,0BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAEQG,GAAG,IAAI;AAEX;AACA,YAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,CAAjB,CAHW,CAKX;;AACA,YAAMV,aAAa,GAAG,EAAtB,CANW,CAQX;;AACAW,MAAAA,eAAe,CAACH,QAAD,CAAf;AAED,KAbH;AAcD;;AAED,QAAMG,eAAe,GAAGC,OAAO,CAAEJ,QAAD,IAAc;AAC5CA,IAAAA,QAAQ,CAACK,OAAT,CAAiBC,OAAO,IAAI;AAC1B,YAAMC,WAAW,GAAGD,OAAO,CAACL,KAAR,CAAc,GAAd,CAApB;AACA,UAAIO,OAAO,GAAG;AACZC,QAAAA,YAAY,EAAEF,WAAW,CAAC,CAAD,CADb;AAEZG,QAAAA,KAAK,EAAEH,WAAW,CAAC,CAAD,CAFN;AAGZI,QAAAA,QAAQ,EAAEJ,WAAW,CAAC,CAAD,CAHT;AAIZK,QAAAA,UAAU,EAAEL,WAAW,CAAC,CAAD,CAJX;AAKZM,QAAAA,OAAO,EAAEN,WAAW,CAAC,CAAD;AALR,OAAd;AAOAf,MAAAA,aAAa,CAACsB,IAAd,CAAmBN,OAAnB;AACD,KAVD,EAD4C,CAa5C;;AACAf,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,GAf8B,EAe5B,CAACuB,WAAD,CAf4B,CAA/B;AAkBArB,EAAAA,OAAO,GAzCM,CA8Cb;AACA;AAEA;AACA;AAEA;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,aAAD;AAAe,MAAA,aAAa,EAAEF;AAA9B;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA9DQD,G;;KAAAA,G;AAgET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent'\nimport { ListOfEntries } from './components/ListOfEntries';\nimport { useState } from 'react';\n\n\n\nfunction App() {\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n\n  // only works when the file is in the public folder\n  function getData() {\n    fetch('/data/advisors_10000.csv')\n      .then((response) => response.text())\n      .then(csv => {\n\n        //split the data based on the line break, and remove the first row\n        const advisors = csv.split('\\n').slice(1);\n\n        //array to save all the objects in\n        const advisorsArray = [];\n\n        //split the rows into each one of the fields\n        investmentInfos(advisors)\n\n      })\n  }\n\n  const investmentInfos = useMemo((advisors) => {\n    advisors.forEach(element => {\n      const advisorData = element.split(';')\n      let advisor = {\n        Bedrijfsnaam: advisorData[0],\n        Adres: advisorData[1],\n        Postcode: advisorData[2],\n        Woonplaats: advisorData[3],\n        Website: advisorData[4]\n      }\n      advisorsArray.push(advisor)\n    });\n\n    //set the array\n    setAdvisorsArray(advisorsArray)\n  }, [investments])\n\n\n  getData();\n\n\n\n\n  //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n\n  //The thing that separates the things is a line break.\n\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={() => getData()}>Getdata</button> */}\n      <SearchComponent />\n      <ListOfEntries advisorsArray={advisorsArray} />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}