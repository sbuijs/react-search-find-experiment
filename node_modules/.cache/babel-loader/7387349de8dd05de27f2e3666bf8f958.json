{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = _ref => {\n  _s();\n\n  let {\n    suggestions,\n    inputValue,\n    searchInput\n  } = _ref;\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]); //display a new list of suggestions to the user\n\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0); //display the list with suggestions to the user\n\n  const [showSuggestions, setShowSuggestions] = useState(false); //input form the field\n\n  const [input, setInput] = useState(\"\"); //when the user changes the input value this method will fire\n\n  const handleInput = e => {\n    e.preventDefault(); //what the user types in the searchbar\n\n    const userInput = e.target.value; // Filter suggestions that don't contain the user's input\n\n    const unLinked = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    setInput(e.target.value);\n    setFilteredSuggestions(unLinked);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true);\n    inputValue(userInput);\n  }; //Set the titles of the table with the values of the titlesArray\n\n\n  useEffect(() => {// console.log('input changed');\n  }, [input]); //event that will be emitted when a user clicks on a suggestion\n\n  const setSuggestion = suggestion => {\n    setFilteredSuggestions([]);\n    setInput(suggestion); // //Input geeft ams terug\n    // console.log(`input: ${input}`);\n    // //suggestion geeft amsterdam terug\n    // console.log(`suggestion: ${suggestion}`);\n\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(false);\n  };\n\n  const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      //if key is enter keys\n      const suggestion = filteredSuggestions[activeSuggestionIndex];\n      setSuggestion(suggestion); // console.log(suggestion);\n\n      setInput(suggestion); // //Input geeft ams terug\n      // console.log(`input: ${input}`);\n      // //suggestion geeft amsterdam terug\n      // console.log(`suggestion: ${suggestion}`);\n    } else if (e.keyCode === 38) {\n      //if key is arrow up\n      if (activeSuggestionIndex <= 0) {\n        return;\n      }\n\n      if (activeSuggestionIndex > 0) {\n        setActiveSuggestionIndex(activeSuggestionIndex - 1);\n      }\n    } else if (e.keyCode === 40) {\n      //if key is arrow down\n      if (activeSuggestionIndex <= filteredSuggestions.length) {\n        setActiveSuggestionIndex(activeSuggestionIndex + 1);\n      }\n    }\n  };\n\n  const test = () => {// console.log(input);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      autoComplete: \"off\",\n      id: \"search-field\",\n      onKeyDown: onKeyDown,\n      value: searchInput,\n      onChange: e => handleInput(e),\n      placeholder: \"Vul hier de plaatsnaam in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), showSuggestions && input && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {\n      filteredSuggestions: filteredSuggestions,\n      activeSuggestionIndex: activeSuggestionIndex,\n      onClick: s => setSuggestion(s),\n      searchInput: searchInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => test(),\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Autocomplete, \"jHsStRhtlJVXBixyEcXPMrCMuJ8=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","useEffect","SuggestionsListComponent","Autocomplete","suggestions","inputValue","searchInput","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","input","setInput","handleInput","e","preventDefault","userInput","target","value","unLinked","filter","suggestion","toLowerCase","indexOf","setSuggestion","onKeyDown","keyCode","length","test","s"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent'\n\n\nexport const Autocomplete = ({ suggestions, inputValue, searchInput }) => {\n\n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n    //display a new list of suggestions to the user\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n    //display the list with suggestions to the user\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    //input form the field\n    const [input, setInput] = useState(\"\");\n\n    //when the user changes the input value this method will fire\n    const handleInput = (e) => {\n        e.preventDefault()\n        //what the user types in the searchbar\n        const userInput = e.target.value;\n\n        // Filter suggestions that don't contain the user's input\n        const unLinked = suggestions.filter(\n            (suggestion) =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n        setInput(e.target.value);\n\n        setFilteredSuggestions(unLinked)\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(true)\n        inputValue(userInput)\n\n    }\n\n    //Set the titles of the table with the values of the titlesArray\n    useEffect(() => {\n        // console.log('input changed');\n    }, [input]);\n\n\n\n    //event that will be emitted when a user clicks on a suggestion\n    const setSuggestion = (suggestion) => {\n        setFilteredSuggestions([]);\n        setInput(suggestion);\n\n        // //Input geeft ams terug\n        // console.log(`input: ${input}`);\n        // //suggestion geeft amsterdam terug\n        // console.log(`suggestion: ${suggestion}`);\n\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(false)\n    }\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            //if key is enter keys\n            const suggestion = filteredSuggestions[activeSuggestionIndex]\n            setSuggestion(suggestion)\n            // console.log(suggestion);\n            setInput(suggestion)\n\n\n            // //Input geeft ams terug\n            // console.log(`input: ${input}`);\n            // //suggestion geeft amsterdam terug\n            // console.log(`suggestion: ${suggestion}`);\n\n\n\n        } else if (e.keyCode === 38) {\n            //if key is arrow up\n            if (activeSuggestionIndex <= 0) {\n                return\n            } if (activeSuggestionIndex > 0) {\n                setActiveSuggestionIndex(activeSuggestionIndex - 1)\n            }\n        } else if (e.keyCode === 40) {\n            //if key is arrow down\n            if (activeSuggestionIndex <= filteredSuggestions.length) {\n                setActiveSuggestionIndex(activeSuggestionIndex + 1)\n            }\n        }\n    }\n\n    const test = () => {\n        // console.log(input);\n    }\n\n\n    return (\n        <>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                autoComplete=\"off\"\n                id=\"search-field\"\n                onKeyDown={onKeyDown}\n                value={searchInput}\n                onChange={(e) => handleInput(e)}\n                placeholder='Vul hier de plaatsnaam in'\n            />\n            {showSuggestions && input &&\n                <SuggestionsListComponent\n                    filteredSuggestions={filteredSuggestions}\n                    activeSuggestionIndex={activeSuggestionIndex}\n                    onClick={s => setSuggestion(s)}\n                    searchInput={searchInput}\n                />}\n            <button onClick={() => test()}>test</button>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}