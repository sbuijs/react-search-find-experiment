{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { fetchAdvisors } from './data/userRepository';\nimport { fetchAliases } from './data/userRepository';\nimport './App.css'; //components\n\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisors, setAdvisors] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7);\n  const [aliases, setAliases] = useState([]);\n  useEffect(() => {\n    // console.log(advisors);\n    let advisorsCorrectCityName = [];\n    console.log(`advisorsCorrectCityName`);\n    console.log(advisorsCorrectCityName);\n    advisors.forEach(advisor => {\n      aliases.forEach(alias => {\n        //if the city is the same as the alias\n        if (advisor.Adres.Woonplaats === alias.alias) {\n          //replace the city name with the original of the alias\n          advisor.Adres.Woonplaats = alias.original;\n        }\n      }); //add the advisor to the array\n\n      advisorsCorrectCityName.push(advisor);\n    }); // setAdvisors([...advisorsCorrectCityName])\n    // console.log(`advisorsCorrectCityName after push --`);\n\n    console.log(advisorsCorrectCityName);\n  }, []); //get data from csv file and add it to the advisorArray\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    fetchAdvisors().then(values => setAdvisors(values));\n    fetchAliases().then(values => setAliases(values));\n  }, []);\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisors.forEach(advisor => {\n      if (advisor.Adres.Woonplaats.toLowerCase().includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor);\n      }\n    });\n    return newArr;\n  }, [advisors, searchQuery]); //Pagination variables\n\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage]);\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage]);\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor);\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor]); //Set the current page number\n\n  const currentPageNumber = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; //filter the list of advisors to create list of suggestions\n\n\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisors.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats);\n    }); //Set removes all duplicate items\n\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions); //convert uniqueSet back to an array\n\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]; //sort on alphabetical order\n\n    filteredSugestions.sort();\n    return filteredSugestions;\n  }, [advisors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {\n      suggestions: suggestions,\n      onSearch: setSearchQuery,\n      setSearchQuery: setSearchQuery,\n      setResultsVisible: setResultsVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      resultsVisible: resultsVisible,\n      searchQuery: searchQuery,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisors,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      fitleredAdvisors: filteredAdvisors.length,\n      currentPageNumber: n => currentPageNumber(n),\n      maxAmountPaginationPages: maxAmountPaginationPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"L3dtyyjc4aBFKKV3gam6ipWYSv8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/App.js"],"names":["useState","useEffect","useMemo","fetchAdvisors","fetchAliases","SearchResults","SearchComponent","App","advisors","setAdvisors","searchQuery","setSearchQuery","resultsVisible","setResultsVisible","currentPage","setCurrentPage","advisorsPerPage","maxAmountPaginationPages","aliases","setAliases","advisorsCorrectCityName","console","log","forEach","advisor","alias","Adres","Woonplaats","original","push","then","values","filteredAdvisors","newArr","toLowerCase","includes","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","slice","currentPageNumber","pageNumber","suggestions","filterAdvisorsSuggestions","uniqueSetAdvisorsWoonplaats","Set","filteredSugestions","sort","length","n"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { fetchAdvisors } from './data/userRepository';\nimport { fetchAliases } from './data/userRepository';\nimport './App.css';\n\n//components\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\n\n\n\nfunction App() {\n\n  const [advisors, setAdvisors] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7);\n  const [aliases, setAliases] = useState([]);\n\n\n  useEffect(() => {\n    // console.log(advisors);\n    let advisorsCorrectCityName = [];\n    console.log(`advisorsCorrectCityName`);\n    console.log(advisorsCorrectCityName);\n    advisors.forEach(advisor => {\n      aliases.forEach(alias => {\n        //if the city is the same as the alias\n        if (advisor.Adres.Woonplaats === alias.alias) {\n          //replace the city name with the original of the alias\n          advisor.Adres.Woonplaats = alias.original\n        }\n      });\n      //add the advisor to the array\n      advisorsCorrectCityName.push(advisor)\n    });\n    // setAdvisors([...advisorsCorrectCityName])\n    // console.log(`advisorsCorrectCityName after push --`);\n    console.log(advisorsCorrectCityName);\n  }, []);\n\n\n  //get data from csv file and add it to the advisorArray\n  useEffect(() => {\n    // only works when the file is in the public folder\n    fetchAdvisors().then(values => setAdvisors(values))\n    fetchAliases().then(values => setAliases(values))\n  }, []);\n\n\n\n\n\n\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisors.forEach(advisor => {\n      if (\n        advisor.Adres.Woonplaats.toLowerCase()\n          .includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor)\n      }\n    });\n    return newArr\n  }, [advisors, searchQuery]);\n\n\n\n  //Pagination variables\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage])\n\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage])\n\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor])\n\n  //Set the current page number\n  const currentPageNumber = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  //filter the list of advisors to create list of suggestions\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisors.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats)\n    })\n    //Set removes all duplicate items\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions);\n    //convert uniqueSet back to an array\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]\n    //sort on alphabetical order\n    filteredSugestions.sort()\n    return filteredSugestions\n  }, [advisors]);\n\n\n  return (\n    <div className=\"App\">\n      <SearchComponent\n        suggestions={suggestions}\n        onSearch={setSearchQuery}\n        setSearchQuery={setSearchQuery}\n        setResultsVisible={setResultsVisible}\n      />\n      <SearchResults\n        resultsVisible={resultsVisible}\n        searchQuery={searchQuery}\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisors}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage}\n        fitleredAdvisors={filteredAdvisors.length}\n        currentPageNumber={n => currentPageNumber(n)}\n        maxAmountPaginationPages={maxAmountPaginationPages}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}