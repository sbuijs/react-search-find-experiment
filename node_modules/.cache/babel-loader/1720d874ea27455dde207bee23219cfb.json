{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = _ref => {\n  _s();\n\n  let {\n    suggestions,\n    handleInputTest\n  } = _ref;\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]); //display a new list of suggestions to the user\n\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0); //display the list with suggestions to the user\n\n  const [showSuggestions, setShowSuggestions] = useState(false); //input form the field\n\n  const [input, setInput] = useState(\"\"); //when the user changes the input value this method will fire\n\n  const onChange = e => {\n    const userInput = e.target.value; // Filter suggestions that don't contain the user's input\n\n    const unLinked = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    setInput(e.target.value);\n    setFilteredSuggestions(unLinked);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true);\n  }; //event that will be emitted when a user clicks on a suggestion\n\n\n  const setSuggestion = suggestion => {\n    setFilteredSuggestions([]);\n    setInput(suggestion);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(false);\n  };\n\n  const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      //if key is enter keys\n      const suggestion = filteredSuggestions[activeSuggestionIndex];\n      setSuggestion(suggestion);\n    } else if (e.keyCode === 38) {\n      //if key is arrow up\n      if (activeSuggestionIndex <= 0) {\n        return;\n      }\n\n      if (activeSuggestionIndex > 0) {\n        setActiveSuggestionIndex(activeSuggestionIndex - 1);\n      }\n    } else if (e.keyCode === 40) {\n      //if key is arrow down\n      if (activeSuggestionIndex <= filteredSuggestions.length) {\n        setActiveSuggestionIndex(activeSuggestionIndex + 1);\n      }\n    }\n  };\n\n  const handleInput = e => {\n    const value = e.target.value;\n    handleInputTest(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: input,\n      placeholder: \"Zoek op bedrijfsnaam of woonplaats\",\n      onChange: i => handleInput(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), showSuggestions && input && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {\n      filteredSuggestions: filteredSuggestions,\n      activeSuggestionIndex: activeSuggestionIndex,\n      onClick: s => setSuggestion(s)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Autocomplete, \"ZUU+ZTVWz1FFxO+JEMSvTKiffyU=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","SuggestionsListComponent","Autocomplete","suggestions","handleInputTest","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","input","setInput","onChange","e","userInput","target","value","unLinked","filter","suggestion","toLowerCase","indexOf","setSuggestion","onKeyDown","keyCode","length","handleInput","i","s"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent'\n\n\nexport const Autocomplete = ({ suggestions, handleInputTest }) => {\n\n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n    //display a new list of suggestions to the user\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n    //display the list with suggestions to the user\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    //input form the field\n    const [input, setInput] = useState(\"\");\n\n    //when the user changes the input value this method will fire\n    const onChange = (e) => {\n        const userInput = e.target.value;\n        // Filter suggestions that don't contain the user's input\n        const unLinked = suggestions.filter(\n            (suggestion) =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n        setInput(e.target.value);\n        setFilteredSuggestions(unLinked)\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(true)\n    }\n\n    //event that will be emitted when a user clicks on a suggestion\n    const setSuggestion = (suggestion) => {\n        setFilteredSuggestions([]);\n        setInput(suggestion);\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(false)\n    }\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            //if key is enter keys\n            const suggestion = filteredSuggestions[activeSuggestionIndex]\n            setSuggestion(suggestion)\n        } else if (e.keyCode === 38) {\n            //if key is arrow up\n            if (activeSuggestionIndex <= 0) {\n                return\n            } if (activeSuggestionIndex > 0) {\n                setActiveSuggestionIndex(activeSuggestionIndex - 1)\n            }\n        } else if (e.keyCode === 40) {\n            //if key is arrow down\n            if (activeSuggestionIndex <= filteredSuggestions.length) {\n                setActiveSuggestionIndex(activeSuggestionIndex + 1)\n            }\n        }\n    }\n\n\n    const handleInput = (e) => {\n        const value = e.target.value;\n        handleInputTest(value)\n    }\n    return (\n        <>\n            {/* <div className='search-autocomplete-component'> */}\n            <input\n                type=\"text\"\n                onChange={onChange}\n                onKeyDown={onKeyDown}\n                value={input}\n                placeholder='Zoek op bedrijfsnaam of woonplaats'\n                onChange={i => handleInput(i)}\n            />\n            {showSuggestions && input &&\n                <SuggestionsListComponent\n                    filteredSuggestions={filteredSuggestions}\n                    activeSuggestionIndex={activeSuggestionIndex}\n                    onClick={s => setSuggestion(s)}\n                />}\n            {/* </div> */}\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}