{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport const fetchAdvisors = () => {\n  return fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n    //get advisors > split the rows into each one of the fields\n    const rawAdvisors = csv.split('\\n').slice(1);\n    const parsedAdvisors = []; //save every advisor and add it to the advisorsArray\n\n    rawAdvisors.forEach(element => {\n      const advisorData = element.split(';');\n      let advisor = {\n        id: uuidv4(),\n        Bedrijfsnaam: advisorData[0],\n        // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n        Adres: {\n          Straatnaam: advisorData[1],\n          //remove spces from postcode\n          Postcode: advisorData[2].replace(/\\s+/g, ''),\n          Woonplaats: advisorData[3]\n        },\n        Website: {\n          Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n          Url: advisorData[4]\n        }\n      };\n      parsedAdvisors.push(advisor);\n    });\n    return parsedAdvisors;\n  });\n};\nexport const fetchAliases = () => {\n  console.log(`fetchAliases`);\n  return fetch('/data/aliasses_2021-12-06-075438_helz.csv').then(response => response.text()).then(csv => {\n    // console.log(csv);\n    const rawAliasses = csv.split('\\n'); // console.log(rawAliasses);\n\n    const parsedAliasses = [];\n    rawAliasses.forEach(element => {\n      const aliasData = element.split(',');\n      let alias = {\n        name1: aliasData[0],\n        name2: aliasData[1]\n      };\n      parsedAliasses.push(alias);\n    });\n    console.log(parsedAliasses);\n    console.log(`-------------`);\n    aliasCollection(parsedAliasses);\n  });\n};\n\nconst aliasCollection = parsedAliasses => {\n  console.log(`aliasCollection`);\n  let collection = [];\n\n  for (let i = 0; i < parsedAliasses.length - 1; i++) {\n    // console.log(parsedAliasses[i]);\n    let collectionOfAliasses = [];\n\n    if (parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name1) || parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name2) || parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name1) || parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name2)) {\n      collectionOfAliasses.push(parsedAliasses[i]);\n    }\n  }\n\n  collectionOfAliasses.push(collectionOfAliasses);\n  console.log(aliasCollection);\n};","map":{"version":3,"sources":["/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/data/userRepository.js"],"names":["v4","uuidv4","fetchAdvisors","fetch","then","response","text","csv","rawAdvisors","split","slice","parsedAdvisors","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Straatnaam","Postcode","replace","Woonplaats","Website","Naam","Url","push","fetchAliases","console","log","rawAliasses","parsedAliasses","aliasData","alias","name1","name2","aliasCollection","collection","i","length","collectionOfAliasses","includes"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n\nexport const fetchAdvisors = () => {\n    return fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n            //get advisors > split the rows into each one of the fields\n            const rawAdvisors = csv.split('\\n').slice(1);\n            const parsedAdvisors = [];\n\n            //save every advisor and add it to the advisorsArray\n            rawAdvisors.forEach(element => {\n                const advisorData = element.split(';')\n                let advisor = {\n                    id: uuidv4(),\n                    Bedrijfsnaam: advisorData[0],\n                    // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n                    Adres: {\n                        Straatnaam: advisorData[1],\n                        //remove spces from postcode\n                        Postcode: advisorData[2].replace(/\\s+/g, ''),\n                        Woonplaats: advisorData[3],\n\n                    },\n                    Website: {\n                        Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n                        Url: advisorData[4],\n                    }\n                }\n                parsedAdvisors.push(advisor)\n            });\n            return parsedAdvisors;\n        })\n}\n\n\nexport const fetchAliases = () => {\n    console.log(`fetchAliases`);\n    return fetch('/data/aliasses_2021-12-06-075438_helz.csv')\n        .then((response) => response.text())\n        .then(csv => {\n            // console.log(csv);\n            const rawAliasses = csv.split('\\n');\n            // console.log(rawAliasses);\n            const parsedAliasses = [];\n\n            rawAliasses.forEach(element => {\n                const aliasData = element.split(',')\n\n                let alias = {\n                    name1: aliasData[0],\n                    name2: aliasData[1]\n                }\n                parsedAliasses.push(alias)\n            })\n            console.log(parsedAliasses);\n            console.log(`-------------`);\n            aliasCollection(parsedAliasses)\n        })\n}\n\n\n\n\nconst aliasCollection = (parsedAliasses) => {\n    console.log(`aliasCollection`);\n    let collection = [];\n\n    for (let i = 0; i < parsedAliasses.length - 1; i++) {\n        // console.log(parsedAliasses[i]);\n        let collectionOfAliasses = [];\n\n        if (parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name1) ||\n            parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name2) ||\n            parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name1) ||\n            parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name2)\n        ) {\n            collectionOfAliasses.push(parsedAliasses[i])\n        }\n\n    }\n    collectionOfAliasses.push(collectionOfAliasses)\n\n    console.log(aliasCollection);\n}\n"]},"metadata":{},"sourceType":"module"}