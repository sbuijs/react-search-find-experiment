{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = _ref => {\n  _s();\n\n  let {\n    suggestions\n  } = _ref;\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]); //display a new list of suggestions to the user\n\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0); //display the list with suggestions to the user\n\n  const [showSuggestions, setShowSuggestions] = useState(false); //input form the field\n\n  const [input, setInput] = useState(\"\"); //when the user changes the input value this method will fire\n\n  const onChange = e => {\n    // console.log('onchange function');\n    const userInput = e.target.value; // console.log(userInput);\n    // Filter suggestions that don't contain the user's input\n\n    const unLinked = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    setInput(e.target.value);\n    setFilteredSuggestions(unLinked);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true);\n  }; //event that will be emitted when a user clicks on a suggestion\n\n\n  const onClick = e => {\n    console.log('onclick');\n    console.log(e.target.innerText);\n    setFilteredSuggestions([]);\n    setInput(e.target.innerText);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(false);\n  };\n\n  const onKeyDown = e => {\n    console.log(e.target);\n    console.log(filteredSuggestions[activeSuggestionIndex]);\n    console.log(activeSuggestionIndex);\n\n    if (e.keyCode === 13) {\n      //check if key is enter keys\n      setFilteredSuggestions([]);\n      setInput(filteredSuggestions[activeSuggestionIndex]);\n      setActiveSuggestionIndex(0);\n      setShowSuggestions(false);\n    } else if (e.keyCode === 38) {\n      //check if key is arrow up\n      if (activeSuggestionIndex <= 0) {\n        return;\n      }\n\n      if (activeSuggestionIndex > 0) {\n        setActiveSuggestionIndex(activeSuggestionIndex - 1);\n      }\n    } else if (e.keyCode === 40) {\n      //check if key is arrow down\n      if (activeSuggestionIndex <= filteredSuggestions.length) {\n        setActiveSuggestionIndex(activeSuggestionIndex + 1);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-autocomplete-component\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), showSuggestions && input && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {\n        filteredSuggestions: filteredSuggestions,\n        activeSuggestionIndex: activeSuggestionIndex,\n        onClick: onClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Autocomplete, \"ZUU+ZTVWz1FFxO+JEMSvTKiffyU=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","SuggestionsListComponent","Autocomplete","suggestions","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","input","setInput","onChange","e","userInput","target","value","unLinked","filter","suggestion","toLowerCase","indexOf","onClick","console","log","innerText","onKeyDown","keyCode","length"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { SuggestionsListComponent } from '../components/SuggestionsListComponent'\n\n\nexport const Autocomplete = ({ suggestions }) => {\n\n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n    //display a new list of suggestions to the user\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n    //display the list with suggestions to the user\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    //input form the field\n    const [input, setInput] = useState(\"\");\n            \n    //when the user changes the input value this method will fire\n    const onChange = (e) => {\n        // console.log('onchange function');\n        const userInput = e.target.value;\n        // console.log(userInput);\n\n        // Filter suggestions that don't contain the user's input\n        const unLinked = suggestions.filter(\n            (suggestion) =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n        setInput(e.target.value);\n        setFilteredSuggestions(unLinked)\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(true)\n    }\n\n    //event that will be emitted when a user clicks on a suggestion\n    const onClick = (e) => {\n        console.log('onclick');\n        console.log(e.target.innerText);\n\n        setFilteredSuggestions([]);\n        setInput(e.target.innerText);\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(false)\n    }\n\n    const onKeyDown = (e) => {\n        console.log(e.target);\n        console.log(filteredSuggestions[activeSuggestionIndex]);\n        console.log(activeSuggestionIndex);\n        if (e.keyCode === 13) {\n            //check if key is enter keys\n            setFilteredSuggestions([]);\n            setInput(filteredSuggestions[activeSuggestionIndex])\n            setActiveSuggestionIndex(0)\n            setShowSuggestions(false)\n\n        } else if (e.keyCode === 38) {\n            //check if key is arrow up\n            if (activeSuggestionIndex <= 0) {\n                return\n            } if (activeSuggestionIndex > 0) {\n                setActiveSuggestionIndex(activeSuggestionIndex - 1)\n            }\n        } else if (e.keyCode === 40) {\n            //check if key is arrow down\n            if (activeSuggestionIndex <= filteredSuggestions.length) {\n                setActiveSuggestionIndex(activeSuggestionIndex + 1)\n            }\n        }\n    }\n\n\n    return (\n        <>\n            <div className='search-autocomplete-component'>\n                <input\n                    type=\"text\"\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    value={input}\n                />\n                {showSuggestions && input &&\n                    <SuggestionsListComponent\n                        filteredSuggestions={filteredSuggestions}\n                        activeSuggestionIndex={activeSuggestionIndex}\n                        onClick={onClick}\n                    />}\n            </div>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}