{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { ListOfEntries } from './components/ListOfEntries';\nimport { useMemo, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  let advisorsArrayy = []; // only works when the file is in the public folder\n\n  function getData(advisorsArray) {\n    fetch('/data/advisors_10000.csv').then(response => response.text()).then(csv => {\n      //split the data based on the line break, and remove the first row\n      const advisors = csv.split('\\n').slice(1); //array to save all the objects in\n      //split the rows into each one of the fields\n\n      advisors.forEach(element => {\n        const advisorData = element.split(';');\n        let advisor = {\n          id: uuidv4(),\n          Bedrijfsnaam: advisorData[0],\n          Adres: advisorData[1],\n          Postcode: advisorData[2],\n          Woonplaats: advisorData[3],\n          Website: advisorData[4]\n        };\n        advisorsArrayy.push(advisor);\n      }); //set the array\n\n      setAdvisorsArray(advisorsArrayy);\n    });\n  }\n\n  const savedAdvisorArray = useMemo(() => getData(advisorsArrayy), [advisorsArray]);\n  getData(); //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n  //The thing that separates the things is a line break.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListOfEntries, {\n      savedAdvisorArray: savedAdvisorArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QVkxb0jD/1p9vaZyDM/NULNpl/0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","ListOfEntries","useMemo","useState","v4","uuidv4","App","advisorsArray","setAdvisorsArray","advisorsArrayy","getData","fetch","then","response","text","csv","advisors","split","slice","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Postcode","Woonplaats","Website","push","savedAdvisorArray"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,eAAT,QAAgC,8BAAhC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;AACA,MAAIM,cAAc,GAAG,EAArB,CAHa,CAKb;;AACA,WAASC,OAAT,CAAiBH,aAAjB,EAAgC;AAC9BI,IAAAA,KAAK,CAAC,0BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAEQG,GAAG,IAAI;AAEX;AACA,YAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,CAAjB,CAHW,CAKX;AAGA;;AAEAF,MAAAA,QAAQ,CAACG,OAAT,CAAiBC,OAAO,IAAI;AAC1B,cAAMC,WAAW,GAAGD,OAAO,CAACH,KAAR,CAAc,GAAd,CAApB;AACA,YAAIK,OAAO,GAAG;AACZC,UAAAA,EAAE,EAAElB,MAAM,EADE;AAEZmB,UAAAA,YAAY,EAAEH,WAAW,CAAC,CAAD,CAFb;AAGZI,UAAAA,KAAK,EAAEJ,WAAW,CAAC,CAAD,CAHN;AAIZK,UAAAA,QAAQ,EAAEL,WAAW,CAAC,CAAD,CAJT;AAKZM,UAAAA,UAAU,EAAEN,WAAW,CAAC,CAAD,CALX;AAMZO,UAAAA,OAAO,EAAEP,WAAW,CAAC,CAAD;AANR,SAAd;AAQAZ,QAAAA,cAAc,CAACoB,IAAf,CAAoBP,OAApB;AACD,OAXD,EAVW,CAuBX;;AACAd,MAAAA,gBAAgB,CAACC,cAAD,CAAhB;AACD,KA3BH;AA4BD;;AAED,QAAMqB,iBAAiB,GAAG5B,OAAO,CAAC,MAAMQ,OAAO,CAACD,cAAD,CAAd,EAAgC,CAACF,aAAD,CAAhC,CAAjC;AAEAG,EAAAA,OAAO,GAvCM,CA4Cb;AACA;AAEA;AACA;AAEA;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,aAAD;AAAe,MAAA,iBAAiB,EAAEoB;AAAlC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA5DQxB,G;;KAAAA,G;AA8DT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent'\nimport { ListOfEntries } from './components/ListOfEntries';\nimport { useMemo, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  let advisorsArrayy = [];\n\n  // only works when the file is in the public folder\n  function getData(advisorsArray) {\n    fetch('/data/advisors_10000.csv')\n      .then((response) => response.text())\n      .then(csv => {\n\n        //split the data based on the line break, and remove the first row\n        const advisors = csv.split('\\n').slice(1);\n\n        //array to save all the objects in\n\n\n        //split the rows into each one of the fields\n\n        advisors.forEach(element => {\n          const advisorData = element.split(';')\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            Adres: advisorData[1],\n            Postcode: advisorData[2],\n            Woonplaats: advisorData[3],\n            Website: advisorData[4]\n          }\n          advisorsArrayy.push(advisor)\n        });\n\n        //set the array\n        setAdvisorsArray(advisorsArrayy)\n      })\n  }\n\n  const savedAdvisorArray = useMemo(() => getData(advisorsArrayy), [advisorsArray])\n\n  getData()\n\n\n\n\n  //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n\n  //The thing that separates the things is a line break.\n\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={() => getData()}>Getdata</button> */}\n      <SearchComponent />\n      <ListOfEntries savedAdvisorArray={savedAdvisorArray} />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}