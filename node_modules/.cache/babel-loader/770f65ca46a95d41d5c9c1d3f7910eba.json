{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Advisors } from './components/Advisors';\nimport { Pagination } from './components/Pagination';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Advisor } from './components/Advisor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Advisors\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [loading, setLoading] = useState(true); //Search function\n\n  const [searchQuery, setSearchQuery] = useState(\"\"); //Pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [isSeachResult, setIsSearchResult] = useState(false);\n  const [filteredAdvisors, setFilteredAvisors] = useState([]);\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true);\n      fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n        //getting the advisors from the cv file\n        //and split the rows into each one of the fields\n        const advisors = csv.split('\\n').slice(1);\n        const advisorsArray = [];\n        advisors.forEach(element => {\n          const advisorData = element.split(';');\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n            Website: advisorData[4]\n          };\n          advisorsArray.push(advisor);\n        });\n        setAdvisorsArray(advisorsArray);\n      });\n      setLoading(false);\n    };\n\n    getData();\n  }, [loading]); //get current advisors for pagination\n\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = advisorsArray.slice(indexOfFirstAdvisor, indexOfLastAdvisor);\n\n  function filterAdvisors(advisorsArray) {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (advisorsArray.Bedrijfsnaam === \"Mulder NV\") {\n        newArr.push(advisor);\n      }\n\n      return newArr;\n    });\n    console.log(newArr);\n    return newArr;\n  }\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  function test(advisorsArray) {\n    advisorsArray.forEach(element => {\n      console.log(element.Bedrijfsnaam);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => filterAdvisors(advisorsArray),\n      children: \"testbutton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => test(advisorsArray),\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchComponent, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Advisors, {\n      loading: loading,\n      searchQuery: searchQuery //currentAdvisors comes from the pagination\n      ,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisorsArray,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      totalAdvisors: 100,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eIR5evZwLIfxTBNtAyGC3UpQuCQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","Advisors","Pagination","useState","useEffect","v4","uuidv4","Advisor","App","advisorsArray","setAdvisorsArray","loading","setLoading","searchQuery","setSearchQuery","currentPage","setCurrentPage","advisorsPerPage","isSeachResult","setIsSearchResult","filteredAdvisors","setFilteredAvisors","getData","fetch","then","response","text","csv","advisors","split","slice","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Website","push","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","filterAdvisors","newArr","console","log","paginate","pageNumber","test"],"mappings":"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","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Advisors } from './components/Advisors';\nimport { Pagination } from './components/Pagination';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Advisor } from './components/Advisor';\n\nfunction App() {\n\n  //Advisors\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n\n  //Search function\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  //Pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n\n  const [isSeachResult, setIsSearchResult] = useState(false);\n  const [filteredAdvisors, setFilteredAvisors] = useState([]);\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true)\n      fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n          //getting the advisors from the cv file\n          //and split the rows into each one of the fields\n          const advisors = csv.split('\\n').slice(1);\n          const advisorsArray = [];\n\n          advisors.forEach(element => {\n            const advisorData = element.split(';')\n            let advisor = {\n              id: uuidv4(),\n              Bedrijfsnaam: advisorData[0],\n              Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n              Website: advisorData[4]\n            }\n            advisorsArray.push(advisor)\n          });\n          setAdvisorsArray(advisorsArray)\n        })\n      setLoading(false)\n    }\n\n    getData()\n  }, [loading]);\n\n\n  //get current advisors for pagination\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = advisorsArray.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n\n\n  function filterAdvisors(advisorsArray) {\n    const newArr = [];\n    advisorsArray.forEach(advisor => {\n      if (advisorsArray.Bedrijfsnaam === \"Mulder NV\") {\n        newArr.push(advisor)\n      }\n      return newArr\n    });\n    console.log(newArr);\n    return newArr\n  }\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  function test(advisorsArray) {\n    advisorsArray.forEach(element => {\n      console.log(element.Bedrijfsnaam);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <FilterTest setTestSearchQuery={setTestSearchQuery} testSearchQuer={testSearchQuery} advisorsArray={advisorsArray} /> */}\n      <button onClick={() => filterAdvisors(advisorsArray)}>testbutton</button>\n      <button onClick={() => test(advisorsArray)}>test</button>\n      <SearchComponent searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n      <Advisors\n        loading={loading}\n        searchQuery={searchQuery}\n        //currentAdvisors comes from the pagination\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisorsArray}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage} />\n      <Pagination currentPage={currentPage} advisorsPerPage={advisorsPerPage} totalAdvisors={100} paginate={paginate} />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}