{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Advisors } from './components/Advisors';\nimport { Pagination } from './components/Pagination';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [tableTitles, setTableTitles] = useState([]);\n  const [loading, setLoading] = useState(true); //Search function\n\n  const [searchQuery, setSearchQuery] = useState(\"\"); //Pagination\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true);\n      console.log(loading);\n      fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n        // //get the titles from the first row of the csv file \n        // //for the purpose of creating the titles of the table columns\n        // const titles = csv.split('\\n').slice(0, 1);\n        // let titlesArray = [];\n        // titles.forEach(element => {\n        //   const titleElement = element.split(';');\n        //   titleElement.forEach(element => {\n        //     const title = {\n        //       id: uuidv4(),\n        //       title: element\n        //     }\n        //     titlesArray.push(title)\n        //   })\n        // });\n        // setTableTitles(titlesArray)\n        let titlesArray = [\"Bedrijfsnaam\", \"Adres\", \"Website\"];\n        console.log(tableTitles);\n        setTableTitles(titlesArray); //getting the advisors from the cv file\n        //and split the rows into each one of the fields\n\n        const advisors = csv.split('\\n').slice(1);\n        const advisorsArray = [];\n        advisors.forEach(element => {\n          const advisorData = element.split(';');\n          let advisor = {\n            id: uuidv4(),\n            Bedrijfsnaam: advisorData[0],\n            Adres: advisorData[1],\n            Postcode: advisorData[2],\n            Woonplaats: advisorData[3],\n            Website: advisorData[4],\n            AdresTest: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`\n          };\n          advisorsArray.push(advisor);\n        });\n        setAdvisorsArray(advisorsArray);\n      });\n      setLoading(false);\n    };\n\n    getData();\n  }, [loading]); //get current advisors for pagination\n\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = advisorsArray.slice(indexOfFirstAdvisor, indexOfLastAdvisor);\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Advisors, {\n      loading: loading,\n      searchQuery: searchQuery,\n      tableTitles: tableTitles //currentAdvisors comes from the pagination\n      ,\n      advisorsArray: currentAdvisors,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      advisorsPerPage: advisorsPerPage,\n      totalAdvisors: 100,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sxAFB2QcdTI9z4gDCZg1D3Harqs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","Advisors","Pagination","useState","useEffect","v4","uuidv4","App","advisorsArray","setAdvisorsArray","tableTitles","setTableTitles","loading","setLoading","searchQuery","setSearchQuery","currentPage","setCurrentPage","advisorsPerPage","getData","console","log","fetch","then","response","text","csv","titlesArray","advisors","split","slice","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Postcode","Woonplaats","Website","AdresTest","push","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","paginate","pageNumber"],"mappings":"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","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent';\nimport { Advisors } from './components/Advisors';\nimport { Pagination } from './components/Pagination';\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n  const [tableTitles, setTableTitles] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  //Search function\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  //Pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    const getData = async () => {\n      setLoading(true)\n      console.log(loading);\n      fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n          // //get the titles from the first row of the csv file \n          // //for the purpose of creating the titles of the table columns\n          // const titles = csv.split('\\n').slice(0, 1);\n          // let titlesArray = [];\n          // titles.forEach(element => {\n          //   const titleElement = element.split(';');\n          //   titleElement.forEach(element => {\n          //     const title = {\n          //       id: uuidv4(),\n          //       title: element\n          //     }\n          //     titlesArray.push(title)\n          //   })\n          // });\n          // setTableTitles(titlesArray)\n\n          let titlesArray = [\"Bedrijfsnaam\", \"Adres\", \"Website\"];\n          console.log(tableTitles);\n          setTableTitles(titlesArray)\n\n\n\n          //getting the advisors from the cv file\n          //and split the rows into each one of the fields\n          const advisors = csv.split('\\n').slice(1);\n          const advisorsArray = [];\n\n          advisors.forEach(element => {\n            const advisorData = element.split(';')\n            let advisor = {\n              id: uuidv4(),\n              Bedrijfsnaam: advisorData[0],\n              Adres: advisorData[1],\n              Postcode: advisorData[2],\n              Woonplaats: advisorData[3],\n              Website: advisorData[4],\n              AdresTest: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n            }\n            advisorsArray.push(advisor)\n\n          });\n          setAdvisorsArray(advisorsArray)\n        })\n      setLoading(false)\n    }\n\n    getData()\n  }, [loading]);\n\n\n  //get current advisors for pagination\n  const indexOfLastAdvisor = currentPage * advisorsPerPage;\n  const indexOfFirstAdvisor = indexOfLastAdvisor - advisorsPerPage;\n  const currentAdvisors = advisorsArray.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <FilterTest setTestSearchQuery={setTestSearchQuery} testSearchQuer={testSearchQuery} advisorsArray={advisorsArray} /> */}\n\n      <SearchComponent searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n      <Advisors\n        loading={loading}\n        searchQuery={searchQuery}\n        tableTitles={tableTitles}\n        //currentAdvisors comes from the pagination\n        advisorsArray={currentAdvisors}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage} />\n      <Pagination advisorsPerPage={advisorsPerPage} totalAdvisors={100} paginate={paginate} />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}