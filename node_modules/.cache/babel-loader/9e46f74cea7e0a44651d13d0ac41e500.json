{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { SearchComponent } from './components/SearchComponent'; // import { ListOfEntries } from './components/ListOfEntries';\n\nimport { useState, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisorsArray, setAdvisorsArray] = useState([]); // only works when the file is in the public folder\n\n  function getData() {\n    fetch('/data/advisors_10000.csv').then(response => response.text()).then(csv => {\n      //split the data based on the line break, and remove the first row\n      const advisors = csv.split('\\n').slice(1);\n      console.log(advisors); //split the rows into each one of the fields\n\n      advisorsInfos(advisors); //set the array\n\n      setAdvisorsArray(advisorsArray);\n    });\n  }\n\n  const advisorsInfos = useMemo(advisors => {\n    //array to save all the objects in\n    const advisorsArray = [];\n    console.log(advisors);\n    console.log(`advisors: ${advisors}`); // advisors.forEach(element => {\n    //   const advisorData = element.split(';')\n    //   let advisor = {\n    //     Bedrijfsnaam: advisorData[0],\n    //     Adres: advisorData[1],\n    //     Postcode: advisorData[2],\n    //     Woonplaats: advisorData[3],\n    //     Website: advisorData[4]\n    //   }\n    //   advisorsArray.push(advisor)\n    // })\n    // return advisorsArray;\n  }, []);\n  getData(); //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n  //The thing that separates the things is a line break.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(SearchComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"roT2/sXGNnlDoucWkSnJbEddsxE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/App.js"],"names":["SearchComponent","useState","useMemo","App","advisorsArray","setAdvisorsArray","getData","fetch","then","response","text","csv","advisors","split","slice","console","log","advisorsInfos"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,eAAT,QAAgC,8BAAhC,C,CACA;;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,EAAD,CAAlD,CAFa,CAKb;;AACA,WAASK,OAAT,GAAmB;AACjBC,IAAAA,KAAK,CAAC,0BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAEQG,GAAG,IAAI;AAEX;AACA,YAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,CAAjB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EANW,CAOX;;AACAK,MAAAA,aAAa,CAACL,QAAD,CAAb,CARW,CAYX;;AAEAP,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,KAjBH;AAkBD;;AAGD,QAAMa,aAAa,GAAGf,OAAO,CAAEU,QAAD,IAAc;AAC1C;AACA,UAAMR,aAAa,GAAG,EAAtB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAa,aAAYJ,QAAS,EAAlC,EAJ0C,CAK1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAjB4B,EAiB1B,EAjB0B,CAA7B;AAqBAN,EAAAA,OAAO,GAjDM,CAsDb;AACA;AAEA;AACA;AAEA;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAvEQH,G;;KAAAA,G;AAyET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { SearchComponent } from './components/SearchComponent'\n// import { ListOfEntries } from './components/ListOfEntries';\nimport { useState, useMemo } from 'react';\n\n\n\nfunction App() {\n\n  const [advisorsArray, setAdvisorsArray] = useState([]);\n\n\n  // only works when the file is in the public folder\n  function getData() {\n    fetch('/data/advisors_10000.csv')\n      .then((response) => response.text())\n      .then(csv => {\n\n        //split the data based on the line break, and remove the first row\n        const advisors = csv.split('\\n').slice(1);\n\n\n        console.log(advisors);\n        //split the rows into each one of the fields\n        advisorsInfos(advisors)\n\n\n\n        //set the array\n\n        setAdvisorsArray(advisorsArray)\n      })\n  }\n\n\n  const advisorsInfos = useMemo((advisors) => {\n    //array to save all the objects in\n    const advisorsArray = [];\n    console.log(advisors);\n    console.log(`advisors: ${advisors}`);\n    // advisors.forEach(element => {\n    //   const advisorData = element.split(';')\n    //   let advisor = {\n    //     Bedrijfsnaam: advisorData[0],\n    //     Adres: advisorData[1],\n    //     Postcode: advisorData[2],\n    //     Woonplaats: advisorData[3],\n    //     Website: advisorData[4]\n    //   }\n    //   advisorsArray.push(advisor)\n    // })\n    // return advisorsArray;\n  }, []);\n\n\n\n  getData()\n\n\n\n\n  //manually parsing the code\n  // D3 and P5.js are libraries that parse for you\n\n  //the thing is now a text string, we can take the text and split it into different elements of an array\n  //first split the rows, then split the columns. \n\n  //The thing that separates the things is a line break.\n\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={() => getData()}>Getdata</button> */}\n      <SearchComponent />\n\n      {/* <ListOfEntries advisorsArray={advisorsArray} /> */}\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}