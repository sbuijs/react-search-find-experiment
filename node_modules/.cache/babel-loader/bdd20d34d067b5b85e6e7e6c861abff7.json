{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport const fetchAdvisors = () => {\n  return fetch('/data/advisors_10000--original.csv').then(response => response.text()).then(csv => {\n    //get advisors > split the rows into each one of the fields\n    const rawAdvisors = csv.split('\\n').slice(1);\n    const parsedAdvisors = []; //save every advisor and add it to the advisorsArray\n\n    rawAdvisors.forEach(element => {\n      const advisorData = element.split(';');\n      let advisor = {\n        id: uuidv4(),\n        Bedrijfsnaam: advisorData[0],\n        // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n        Adres: {\n          Straatnaam: advisorData[1],\n          //remove spces from postcode\n          Postcode: advisorData[2].replace(/\\s+/g, ''),\n          Woonplaats: advisorData[3]\n        },\n        Website: {\n          Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n          Url: advisorData[4]\n        }\n      };\n      parsedAdvisors.push(advisor);\n    });\n    return parsedAdvisors;\n  });\n};\nexport const fetchAliases = () => {\n  return fetch('/data/aliasses_2021-12-06-075438_helz.csv').then(response => response.text()).then(csv => {\n    const rawAliasses = csv.split('\\n');\n    const parsedAliasses = [];\n    rawAliasses.forEach(element => {\n      const aliasData = element.split(',');\n      let alias = {\n        name0: aliasData[0],\n        name1: aliasData[1]\n      };\n      parsedAliasses.push(alias);\n    }); // console.log(parsedAliasses);\n\n    return parsedAliasses;\n  });\n}; // const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2) || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n//     // console.log(checkSamePlace(parsedAliasses[8], parsedAliasses[9]));\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         // const samePlaces = []\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             // console.log(parsedAliasses[i]);\n//         }\n//     }\n// }\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     let collection = [];\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         // console.log(parsedAliasses[i]);\n//         let collectionOfAliasses = [];\n//         if (parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name2) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name2)\n//         ) {\n//             collectionOfAliasses.push(parsedAliasses[i])\n//             collection.push(collectionOfAliasses)\n//         }\n//     }\n//     console.log(collection);\n// }\n// const arrayOne = [{ \"color\": \"blue\" }, { \"color\": \"green\" }, { \"color\": \"yellow\" }];\n// const arrayTwo = [{ \"material\": \"steel\" }, { \"material\": \"glass\" }, { \"material\": \"water\" }];\n// console.log(arrayOne);\n// console.log(arrayTwo);\n// function test() {\n//     for (let i = 0; i <= arrayOne.length - 1; i++) {\n//         for (let j = 0; j <= arrayTwo.length - 1; j++) {\n//             console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n//         }\n//     }\n// }\n// test()\n\nconst arrayOne = [{\n  \"color\": \"blue\"\n}, {\n  \"color\": \"green\"\n}, {\n  \"color\": \"yellow\"\n}];\nconst arrayTwo = [{\n  \"material\": \"steel\"\n}, {\n  \"material\": \"glass\"\n}, {\n  \"material\": \"water\"\n}];\nconsole.log(arrayOne);\nconsole.log(arrayTwo);\n\nfunction test() {\n  for (let i = 0; i <= arrayOne.length - 1; i++) {\n    let newArray = [];\n\n    for (let j = 0; j <= arrayTwo.length - 1; j++) {\n      console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n      newArray.push(arrayOne[i]);\n      newArray.push(arrayTwo[i]);\n    }\n\n    console.log(newArray);\n  }\n}\n\ntest();","map":{"version":3,"sources":["/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/data/userRepository.js"],"names":["v4","uuidv4","fetchAdvisors","fetch","then","response","text","csv","rawAdvisors","split","slice","parsedAdvisors","forEach","element","advisorData","advisor","id","Bedrijfsnaam","Adres","Straatnaam","Postcode","replace","Woonplaats","Website","Naam","Url","push","fetchAliases","rawAliasses","parsedAliasses","aliasData","alias","name0","name1","arrayOne","arrayTwo","console","log","test","i","length","newArray","j","color","material"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n\nexport const fetchAdvisors = () => {\n    return fetch('/data/advisors_10000--original.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n            //get advisors > split the rows into each one of the fields\n            const rawAdvisors = csv.split('\\n').slice(1);\n            const parsedAdvisors = [];\n\n            //save every advisor and add it to the advisorsArray\n            rawAdvisors.forEach(element => {\n                const advisorData = element.split(';')\n                let advisor = {\n                    id: uuidv4(),\n                    Bedrijfsnaam: advisorData[0],\n                    // Adres: `${advisorData[1]}, ${advisorData[2]}, ${advisorData[3]}`,\n                    Adres: {\n                        Straatnaam: advisorData[1],\n                        //remove spces from postcode\n                        Postcode: advisorData[2].replace(/\\s+/g, ''),\n                        Woonplaats: advisorData[3],\n\n                    },\n                    Website: {\n                        Naam: advisorData[4].replace(\"https://www.\", '').replace(\"http://www.\", ''),\n                        Url: advisorData[4],\n                    }\n                }\n                parsedAdvisors.push(advisor)\n            });\n            return parsedAdvisors;\n        })\n}\n\n\nexport const fetchAliases = () => {\n    return fetch('/data/aliasses_2021-12-06-075438_helz.csv')\n        .then((response) => response.text())\n        .then(csv => {\n\n            const rawAliasses = csv.split('\\n');\n            const parsedAliasses = [];\n\n            rawAliasses.forEach(element => {\n                const aliasData = element.split(',')\n\n                let alias = {\n                    name0: aliasData[0],\n                    name1: aliasData[1]\n                }\n                parsedAliasses.push(alias)\n            });\n            // console.log(parsedAliasses);\n            return parsedAliasses;\n        })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n\n\n//     const checkSamePlace = (alias1, alias2) => {\n//         if (alias1.name0.includes(alias2.name1 || alias2.name2) || alias1.name1.includes(alias2.name1 || alias2.name2)) {\n//             return true;\n//         }\n//         return false;\n//     }\n\n//     // console.log(checkSamePlace(parsedAliasses[8], parsedAliasses[9]));\n\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         // const samePlaces = []\n//         if (checkSamePlace(parsedAliasses[i], parsedAliasses[i + 1])) {\n//             // console.log(parsedAliasses[i]);\n//         }\n//     }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const aliasCollection = (parsedAliasses) => {\n//     console.log(`aliasCollection`);\n//     let collection = [];\n\n//     for (let i = 0; i < parsedAliasses.length - 1; i++) {\n//         // console.log(parsedAliasses[i]);\n//         let collectionOfAliasses = [];\n\n//         if (parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name1.includes(parsedAliasses[i + 1].name2) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name1) ||\n//             parsedAliasses[i].name2.includes(parsedAliasses[i + 1].name2)\n//         ) {\n//             collectionOfAliasses.push(parsedAliasses[i])\n//             collection.push(collectionOfAliasses)\n//         }\n\n//     }\n\n\n//     console.log(collection);\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const arrayOne = [{ \"color\": \"blue\" }, { \"color\": \"green\" }, { \"color\": \"yellow\" }];\n// const arrayTwo = [{ \"material\": \"steel\" }, { \"material\": \"glass\" }, { \"material\": \"water\" }];\n// console.log(arrayOne);\n// console.log(arrayTwo);\n\n// function test() {\n//     for (let i = 0; i <= arrayOne.length - 1; i++) {\n//         for (let j = 0; j <= arrayTwo.length - 1; j++) {\n//             console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n//         }\n//     }\n// }\n\n// test()\n\n\n\nconst arrayOne = [{ \"color\": \"blue\" }, { \"color\": \"green\" }, { \"color\": \"yellow\" }];\nconst arrayTwo = [{ \"material\": \"steel\" }, { \"material\": \"glass\" }, { \"material\": \"water\" }];\nconsole.log(arrayOne);\nconsole.log(arrayTwo);\n\nfunction test() {\n\n\n    for (let i = 0; i <= arrayOne.length - 1; i++) {\n        let newArray = [];\n        for (let j = 0; j <= arrayTwo.length - 1; j++) {\n            console.log(`i:${i} ${arrayOne[i].color},j:${arrayTwo[j].material} `);\n            newArray.push(arrayOne[i])\n            newArray.push(arrayTwo[i])\n        }\n\n        console.log(newArray);\n    }\n\n}\n\ntest()"]},"metadata":{},"sourceType":"module"}