{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = () => {\n  _s();\n\n  const [suggestions, setSuggestions] = useState([]);\n  const names = ['david', 'damien', 'sara', 'jane'];\n\n  const onTextChanged = e => {\n    const value = e.target.value;\n    console.log(value);\n\n    if (value.lenght === 0) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => onTextChanged(e),\n      type: \"text\",\n      placeholder: \"type a name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: names.map(name => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Autocomplete, \"xLFRUKi5CexG/Qcuhka4a4H1SoY=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","Autocomplete","suggestions","setSuggestions","names","onTextChanged","e","value","target","console","log","lenght","map","name"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAE9B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMI,KAAK,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,MAA5B,CAAd;;AAGA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AACzB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,QAAIA,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB,CAEvB;AACJ,GAND;;AAQA,sBACI;AAAA,4BACI;AAAO,MAAA,QAAQ,EAAGL,CAAD,IAAOD,aAAa,CAACC,CAAD,CAArC;AAA0C,MAAA,IAAI,EAAC,MAA/C;AAAsD,MAAA,WAAW,EAAC;AAAlE;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBACKF,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AACjB,4BACI;AAAA,oBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH,OAJA;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAaH,CA5BM;;GAAMZ,Y;;KAAAA,Y","sourcesContent":["import { useState } from 'react';\n\nexport const Autocomplete = () => {\n\n    const [suggestions, setSuggestions] = useState([]);\n\n    const names = ['david', 'damien', 'sara', 'jane'];\n\n\n    const onTextChanged = (e) => {\n        const value = e.target.value;\n        console.log(value);\n        if (value.lenght === 0) {\n            \n        }\n    }\n\n    return (\n        <>\n            <input onChange={(e) => onTextChanged(e)} type=\"text\" placeholder=\"type a name\" />\n            <ul>\n                {names.map((name) => {\n                    return (\n                        <p>{name}</p>\n                    )\n                })}\n            </ul>\n        </>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}