{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { fetchAdvisors } from './data/userRepository'; // import { fetchAliases } from './data/userRepository';\n\nimport './App.css'; //components\n\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisors, setAdvisors] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7); // const [aliases, setAliases] = useState([]);\n  //get data from csv file and add it to the advisorArray\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    fetchAdvisors().then(values => setAdvisors(values)); // fetchAliases().then(values => setAliases(values))\n  }, []); // useEffect(() => {\n  //   const woonplaatsUpdate = () => {\n  //     const newArr = [];\n  //     advisors.forEach(advisor => {\n  //       let woonplaatsAdvisor = advisor.Adres.Woonplaats.toLowerCase();\n  //       aliases.forEach(alias => {\n  //         // for (let i = 0; i <= aliases.length; i++) {\n  //         if (woonplaatsAdvisor.toLowerCase() === alias.alias.toLowerCase()) {\n  //           console.log(`advisor.Adres.Woonplaats: ${woonplaatsAdvisor} ==== alias: ${alias.alias.toLowerCase()}`);\n  //           console.log(alias.original.toLowerCase());\n  //         }\n  //         // };\n  //       });\n  //       return newArr\n  //     })\n  //     return newArr\n  //   };\n  //   console.log(woonplaatsUpdate());\n  // }, [advisors, aliases]);\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisors.forEach(advisor => {\n      if (advisor.Adres.Woonplaats.toLowerCase().includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor);\n      }\n    }); // console.log(`Dit is de searchQuery: ${searchQuery}`);\n\n    return newArr;\n  }, [advisors, searchQuery]); //Pagination variables\n\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage]);\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage]);\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor);\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor]); //Set the current page number\n\n  const currentPageNumber = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; //filter the list of advisors to create list of suggestions\n\n\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisors.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats);\n    }); //Set removes all duplicate items\n\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions); //convert uniqueSet back to an array\n\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]; //sort on alphabetical order\n\n    filteredSugestions.sort();\n    return filteredSugestions;\n  }, [advisors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchComponent, {\n      suggestions: suggestions,\n      onSearch: setSearchQuery,\n      setSearchQuery: setSearchQuery,\n      setResultsVisible: setResultsVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      resultsVisible: resultsVisible,\n      searchQuery: searchQuery,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisors,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      fitleredAdvisors: filteredAdvisors.length,\n      currentPageNumber: n => currentPageNumber(n),\n      maxAmountPaginationPages: maxAmountPaginationPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2LA0UmMM6WyCMSUND7cYzATdUhk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/App.js"],"names":["useState","useEffect","useMemo","fetchAdvisors","SearchResults","SearchComponent","App","advisors","setAdvisors","searchQuery","setSearchQuery","resultsVisible","setResultsVisible","currentPage","setCurrentPage","advisorsPerPage","maxAmountPaginationPages","then","values","filteredAdvisors","newArr","forEach","advisor","Adres","Woonplaats","toLowerCase","includes","push","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","slice","currentPageNumber","pageNumber","suggestions","filterAdvisorsSuggestions","uniqueSetAdvisorsWoonplaats","Set","filteredSugestions","sort","length","n"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { fetchAdvisors } from './data/userRepository';\n// import { fetchAliases } from './data/userRepository';\nimport './App.css';\n\n//components\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\n\n\n\nfunction App() {\n\n  const [advisors, setAdvisors] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7);\n  // const [aliases, setAliases] = useState([]);\n\n\n  //get data from csv file and add it to the advisorArray\n  useEffect(() => {\n    // only works when the file is in the public folder\n    fetchAdvisors().then(values => setAdvisors(values))\n    // fetchAliases().then(values => setAliases(values))\n  }, []);\n\n\n\n\n  // useEffect(() => {\n  //   const woonplaatsUpdate = () => {\n  //     const newArr = [];\n\n  //     advisors.forEach(advisor => {\n  //       let woonplaatsAdvisor = advisor.Adres.Woonplaats.toLowerCase();\n  //       aliases.forEach(alias => {\n\n  //         // for (let i = 0; i <= aliases.length; i++) {\n  //         if (woonplaatsAdvisor.toLowerCase() === alias.alias.toLowerCase()) {\n  //           console.log(`advisor.Adres.Woonplaats: ${woonplaatsAdvisor} ==== alias: ${alias.alias.toLowerCase()}`);\n  //           console.log(alias.original.toLowerCase());\n  //         }\n  //         // };\n  //       });\n  //       return newArr\n  //     })\n  //     return newArr\n  //   };\n  //   console.log(woonplaatsUpdate());\n\n  // }, [advisors, aliases]);\n\n\n\n\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisors.forEach(advisor => {\n      if (\n        advisor.Adres.Woonplaats.toLowerCase()\n          .includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor)\n      }\n    });\n    // console.log(`Dit is de searchQuery: ${searchQuery}`);\n    return newArr\n  }, [advisors, searchQuery]);\n\n\n  //Pagination variables\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage])\n\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage])\n\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor])\n\n  //Set the current page number\n  const currentPageNumber = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  //filter the list of advisors to create list of suggestions\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisors.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats)\n    })\n    //Set removes all duplicate items\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions);\n    //convert uniqueSet back to an array\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]\n    //sort on alphabetical order\n    filteredSugestions.sort()\n    return filteredSugestions\n  }, [advisors]);\n\n\n  return (\n    <div className=\"App\">\n      <SearchComponent\n        suggestions={suggestions}\n        onSearch={setSearchQuery}\n        setSearchQuery={setSearchQuery}\n        setResultsVisible={setResultsVisible}\n      />\n      <SearchResults\n        resultsVisible={resultsVisible}\n        searchQuery={searchQuery}\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisors}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage}\n        fitleredAdvisors={filteredAdvisors.length}\n        currentPageNumber={n => currentPageNumber(n)}\n        maxAmountPaginationPages={maxAmountPaginationPages}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}