{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { SuggestionsListComponent } from './components/SuggestionsListComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Autocomplete = _ref => {\n  _s();\n\n  let {\n    suggestions\n  } = _ref;\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]); //display a new list of suggestions to the user\n\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0); //display the list with suggestions to the user\n\n  const [showSuggestions, setShowSuggestions] = useState(false); //input form the field\n\n  const [input, setInput] = useState(\"\"); //when the user changes the input value this method will fire\n\n  const onChange = e => {\n    // console.log('onchange function');\n    const userInput = e.target.value; // console.log(userInput);\n    // Filter our suggestions that don't contain the user's input\n\n    const unLinked = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    console.log(unLinked);\n    setInput(e.target.value);\n    setFilteredSuggestions(unLinked);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true);\n  }; //event that will be emitted when a user clicks on a suggestion\n\n\n  const onClick = e => {\n    setFilteredSuggestions([]);\n    setInput(e.target.innerText);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"input: \", input]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"filteredSuggestions: \", filteredSuggestions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"activeSuggestionsIndex: \", activeSuggestionIndex]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"showSuggestions: \", showSuggestions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => onChange(e),\n      type: \"text\",\n      placeholder: \"type a name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), showSuggestions && input && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Autocomplete, \"ZUU+ZTVWz1FFxO+JEMSvTKiffyU=\");\n\n_c = Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/steef/Documents/Fonk-learning/search-find-experiment/src/components/Autocomplete.js"],"names":["useState","SuggestionsListComponent","Autocomplete","suggestions","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","input","setInput","onChange","e","userInput","target","value","unLinked","filter","suggestion","toLowerCase","indexOf","console","log","onClick","innerText"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,wBAAT,QAAyC,uCAAzC;;;AAGA,OAAO,MAAMC,YAAY,GAAG,QAAqB;AAAA;;AAAA,MAApB;AAAEC,IAAAA;AAAF,GAAoB;AAG7C,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDL,QAAQ,CAAC,EAAD,CAA9D,CAH6C,CAI7C;;AACA,QAAM,CAACM,qBAAD,EAAwBC,wBAAxB,IAAoDP,QAAQ,CAAC,CAAD,CAAlE,CAL6C,CAM7C;;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,KAAD,CAAtD,CAP6C,CAQ7C;;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC,CAT6C,CAW7C;;AACA,QAAMY,QAAQ,GAAIC,CAAD,IAAO;AACpB;AACA,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA3B,CAFoB,CAGpB;AAEA;;AACA,UAAMC,QAAQ,GAAGd,WAAW,CAACe,MAAZ,CACZC,UAAD,IACIA,UAAU,CAACC,WAAX,GAAyBC,OAAzB,CAAiCP,SAAS,CAACM,WAAV,EAAjC,IAA4D,CAAC,CAFpD,CAAjB;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAN,IAAAA,QAAQ,CAACE,CAAC,CAACE,MAAF,CAASC,KAAV,CAAR;AACAX,IAAAA,sBAAsB,CAACY,QAAD,CAAtB;AACAV,IAAAA,wBAAwB,CAAC,CAAD,CAAxB;AACAE,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,GAfD,CAZ6C,CA6B7C;;;AACA,QAAMe,OAAO,GAAIX,CAAD,IAAO;AACnBR,IAAAA,sBAAsB,CAAC,EAAD,CAAtB;AACAM,IAAAA,QAAQ,CAACE,CAAC,CAACE,MAAF,CAASU,SAAV,CAAR;AACAlB,IAAAA,wBAAwB,CAAC,CAAD,CAAxB;AACAE,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,GALD;;AAQA,sBACI;AAAA,4BACI;AAAA,4BAAWC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,0CAAyBN,mBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,6CAA4BE,qBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,sCAAqBE,eAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AACI,MAAA,QAAQ,EAAGK,CAAD,IAAOD,QAAQ,CAACC,CAAD,CAD7B;AACkC,MAAA,IAAI,EAAC,MADvC;AAC8C,MAAA,WAAW,EAAC;AAD1D;AAAA;AAAA;AAAA;AAAA,YALJ,EAQKL,eAAe,IAAIE,KAAnB,iBAA4B,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,YARjC;AAAA,kBADJ;AAYH,CAlDM;;GAAMR,Y;;KAAAA,Y","sourcesContent":["import { useState } from 'react';\nimport { SuggestionsListComponent } from './components/SuggestionsListComponent'\n\n\nexport const Autocomplete = ({ suggestions }) => {\n\n\n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n    //display a new list of suggestions to the user\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n    //display the list with suggestions to the user\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    //input form the field\n    const [input, setInput] = useState(\"\");\n\n    //when the user changes the input value this method will fire\n    const onChange = (e) => {\n        // console.log('onchange function');\n        const userInput = e.target.value;\n        // console.log(userInput);\n\n        // Filter our suggestions that don't contain the user's input\n        const unLinked = suggestions.filter(\n            (suggestion) =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n        console.log(unLinked);\n        setInput(e.target.value);\n        setFilteredSuggestions(unLinked)\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(true)\n    }\n\n    //event that will be emitted when a user clicks on a suggestion\n    const onClick = (e) => {\n        setFilteredSuggestions([]);\n        setInput(e.target.innerText);\n        setActiveSuggestionIndex(0)\n        setShowSuggestions(false)\n    }\n\n\n    return (\n        <>\n            <p>input: {input}</p>\n            <p>filteredSuggestions: {filteredSuggestions}</p>\n            <p>activeSuggestionsIndex: {activeSuggestionIndex}</p>\n            <p>showSuggestions: {showSuggestions}</p>\n            <input\n                onChange={(e) => onChange(e)} type=\"text\" placeholder=\"type a name\"\n            />\n            {showSuggestions && input && <SuggestionsListComponent />}\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}