{"ast":null,"code":"var _jsxFileName = \"/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { fetchAdvisors } from './data/userRepository';\nimport { fetchAliases } from './data/userRepository';\nimport './App.css'; //components\n\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [advisors, setAdvisors] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7); // const [aliases, setAliases] = ([]);\n  //get data from csv file and add it to the advisorArray\n\n  useEffect(() => {\n    // only works when the file is in the public folder\n    fetchAdvisors().then(values => setAdvisors(values)); // fetchAliases().then(values => setAliases(value))\n\n    fetchAliases();\n  }, []);\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisors.forEach(advisor => {\n      if (advisor.Bedrijfsnaam.toLowerCase().includes(searchQuery.toLowerCase()) || advisor.Adres.Woonplaats.toLowerCase().includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor);\n      }\n    }); // console.log(`Dit is de searchQuery: ${searchQuery}`);\n\n    return newArr;\n  }, [advisors, searchQuery]); //Pagination variables\n\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage]);\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage]);\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor);\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor]); //Set the current page number\n\n  const currentPageNumber = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; //filter the list of advisors to create list of suggestions\n\n\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisors.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats);\n    }); //Set removes all duplicate items\n\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions); //convert uniqueSet back to an array\n\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]; //sort on alphabetical order\n\n    filteredSugestions.sort();\n    return filteredSugestions;\n  }, [advisors]);\n\n  const testButton = () => {\n    console.log(`test`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testButton(),\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchComponent, {\n      suggestions: suggestions,\n      onSearch: setSearchQuery,\n      setSearchQuery: setSearchQuery,\n      setResultsVisible: setResultsVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      resultsVisible: resultsVisible,\n      searchQuery: searchQuery,\n      currentAdvisors: currentAdvisors,\n      advisorsArray: advisors,\n      currentPage: currentPage,\n      advisorsPerPage: advisorsPerPage,\n      fitleredAdvisors: filteredAdvisors.length,\n      currentPageNumber: n => currentPageNumber(n),\n      maxAmountPaginationPages: maxAmountPaginationPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2LA0UmMM6WyCMSUND7cYzATdUhk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/steef/Documents/Github-sbuijs/react-search-find-experiment/src/App.js"],"names":["useState","useEffect","useMemo","fetchAdvisors","fetchAliases","SearchResults","SearchComponent","App","advisors","setAdvisors","searchQuery","setSearchQuery","resultsVisible","setResultsVisible","currentPage","setCurrentPage","advisorsPerPage","maxAmountPaginationPages","then","values","filteredAdvisors","newArr","forEach","advisor","Bedrijfsnaam","toLowerCase","includes","Adres","Woonplaats","push","indexOfLastAdvisor","indexOfFirstAdvisor","currentAdvisors","slice","currentPageNumber","pageNumber","suggestions","filterAdvisorsSuggestions","uniqueSetAdvisorsWoonplaats","Set","filteredSugestions","sort","testButton","console","log","length","n"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { fetchAdvisors } from './data/userRepository';\nimport { fetchAliases } from './data/userRepository';\nimport './App.css';\n\n//components\nimport { SearchResults } from './components/SearchResults';\nimport { SearchComponent } from './components/SearchComponent';\n\n\n\nfunction App() {\n\n  const [advisors, setAdvisors] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [resultsVisible, setResultsVisible] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [advisorsPerPage] = useState(10);\n  const [maxAmountPaginationPages] = useState(7);\n  // const [aliases, setAliases] = ([]);\n\n  //get data from csv file and add it to the advisorArray\n  useEffect(() => {\n    // only works when the file is in the public folder\n    fetchAdvisors().then(values => setAdvisors(values))\n    // fetchAliases().then(values => setAliases(value))\n    fetchAliases()\n  }, []);\n\n  const filteredAdvisors = useMemo(() => {\n    const newArr = [];\n    advisors.forEach(advisor => {\n      if (\n        advisor.Bedrijfsnaam.toLowerCase()\n          .includes(searchQuery.toLowerCase())\n        ||\n        advisor.Adres.Woonplaats.toLowerCase()\n          .includes(searchQuery.toLowerCase())) {\n        newArr.push(advisor)\n      }\n    });\n    // console.log(`Dit is de searchQuery: ${searchQuery}`);\n    return newArr\n  }, [advisors, searchQuery]);\n\n\n  //Pagination variables\n  const indexOfLastAdvisor = useMemo(() => {\n    return currentPage * advisorsPerPage;\n  }, [currentPage, advisorsPerPage])\n\n  const indexOfFirstAdvisor = useMemo(() => {\n    return indexOfLastAdvisor - advisorsPerPage;\n  }, [indexOfLastAdvisor, advisorsPerPage])\n\n  const currentAdvisors = useMemo(() => {\n    return filteredAdvisors.slice(indexOfFirstAdvisor, indexOfLastAdvisor)\n  }, [filteredAdvisors, indexOfFirstAdvisor, indexOfLastAdvisor])\n\n  //Set the current page number\n  const currentPageNumber = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  //filter the list of advisors to create list of suggestions\n  const suggestions = useMemo(() => {\n    const filterAdvisorsSuggestions = [];\n    advisors.forEach(advisor => {\n      filterAdvisorsSuggestions.push(advisor.Adres.Woonplaats)\n    })\n    //Set removes all duplicate items\n    const uniqueSetAdvisorsWoonplaats = new Set(filterAdvisorsSuggestions);\n    //convert uniqueSet back to an array\n    const filteredSugestions = [...uniqueSetAdvisorsWoonplaats]\n    //sort on alphabetical order\n    filteredSugestions.sort()\n    return filteredSugestions\n  }, [advisors]);\n\n\n  const testButton = () => {\n    console.log(`test`);\n  }\n  return (\n    <div className=\"App\">\n      <button onClick={testButton()}>test</button>\n      <SearchComponent\n        suggestions={suggestions}\n        onSearch={setSearchQuery}\n        setSearchQuery={setSearchQuery}\n        setResultsVisible={setResultsVisible}\n      />\n      <SearchResults\n        resultsVisible={resultsVisible}\n        searchQuery={searchQuery}\n        currentAdvisors={currentAdvisors}\n        advisorsArray={advisors}\n        currentPage={currentPage}\n        advisorsPerPage={advisorsPerPage}\n        fitleredAdvisors={filteredAdvisors.length}\n        currentPageNumber={n => currentPageNumber(n)}\n        maxAmountPaginationPages={maxAmountPaginationPages}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}